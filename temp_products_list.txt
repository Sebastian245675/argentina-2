        <CardContent className="p-6">
          {loadingProducts ? (
            <div className="flex justify-center items-center py-12">
              <div className="flex flex-col items-center text-sky-600">
                <Loader2 className="h-10 w-10 animate-spin mb-2" />
                <p className="text-sm font-medium">Cargando productos...</p>
              </div>
            </div>
          ) : sortedProducts.length === 0 ? (
            <div className="text-center py-10 bg-sky-50/50 rounded-lg border border-dashed border-sky-200">
              <div className="flex flex-col items-center">
                <Package className="h-12 w-12 text-sky-300 mb-3" />
                <p className="text-sky-700 font-medium">No se encontraron productos</p>
                {searchTerm ? (
                  <p className="text-sm text-sky-600/70 mt-1">Prueba con otros términos de búsqueda</p>
                ) : selectedCategory ? (
                  <p className="text-sm text-sky-600/70 mt-1">No hay productos en esta categoría</p>
                ) : (
                  <p className="text-sm text-sky-600/70 mt-1">Añade tu primer producto</p>
                )}
              </div>
            </div>
          ) : (
            <>
              <div className="grid gap-4">
                {paginatedProducts.map((product) => {
                  const stockStatus = getStockStatus(product.stock);
                  return (
                    <div key={product.id} className="flex items-center justify-between p-5 border rounded-xl hover:shadow-lg transition-all duration-200 hover:border-sky-200 bg-white">
                      <div className="flex items-center gap-5">
                        <div className="relative w-20 h-20">
                          {loadingImages[product.id] && (
                            <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-xl">
                              <Loader2 className="h-5 w-5 text-sky-600 animate-spin" />
                            </div>
                          )}
                          <img
                            src={product.image}
                            alt={product.name}
                            className={cn(
                              "w-20 h-20 object-cover rounded-xl shadow-md transition-opacity duration-300",
                              loadingImages[product.id] ? "opacity-0" : "opacity-100"
                            )}
                            onLoad={() => handleImageLoadEnd(product.id)}
                            onError={(e) => {
                              handleImageLoadEnd(product.id);
                              e.currentTarget.src = 'https://via.placeholder.com/80?text=No+Image';
                            }}
                            onLoadStart={() => handleImageLoadStart(product.id)}
                          />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-bold text-lg">{product.name}</h4>
                          <p className="text-sm text-muted-foreground line-clamp-2 mt-1">{product.description}</p>
                          <div className="flex items-center gap-3 mt-2">
                            <div className="flex flex-wrap gap-1">
                              <Badge variant="outline" className="font-medium bg-orange-50 text-orange-700 border-orange-200">
                                <span className="text-xs text-gray-500 mr-1">Categoría:</span> {product.categoryName || product.category}
                              </Badge>
                              {product.subcategoryName && (
                                <div className="flex items-center">
                                  <svg className="h-3 w-3 text-gray-400 mx-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>
                                  <Badge variant="outline" className="font-medium bg-blue-50 text-blue-700 border-blue-200">
                                    <span className="text-xs text-gray-500 mr-1">Subcategoría:</span> {product.subcategoryName}
                                  </Badge>
                                </div>
                              )}
                            </div>
                            <span className="text-lg font-bold text-green-600">
                              ${product.price.toLocaleString()}
                            </span>
                            <Badge className={cn(
                              stockStatus.color, 
                              "flex items-center gap-1"
                            )}>
                              <span className={cn(
                                "w-2 h-2 rounded-full",
                                stockStatus.text === "En Stock" ? "bg-green-400" : 
                                stockStatus.text === "Stock Bajo" ? "bg-yellow-400" : 
                                "bg-red-400"
                              )}></span>
                              {stockStatus.text}: {product.stock}
                            </Badge>
                            {product.lastModified && (
                              <Badge variant="outline" className="text-xs bg-blue-50 text-blue-700 border-blue-200 ml-2">
                                <Clock className="h-3 w-3 mr-1 opacity-70" />
                                {new Date(product.lastModified.toDate?.() || product.lastModified).toLocaleDateString()}
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleEdit(product)}
                                className="hover:bg-blue-50 hover:border-blue-300 transition-colors text-blue-600"
                                disabled={liberta === "no"}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent side="left" className="bg-blue-600">
                              <p className="text-xs">Editar producto</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>

                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  const newWindow = window.open(product.image, '_blank');
                                  newWindow?.focus();
                                }}
                                className="hover:bg-sky-50 hover:border-sky-300 transition-colors text-sky-600"
                              >
                                <Eye className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent side="left" className="bg-sky-600">
                              <p className="text-xs">Ver imagen</p>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                        
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              size="sm"
                              variant="outline"
                              className="text-red-600 hover:bg-red-50 hover:border-red-300 transition-colors"
                              disabled={liberta === "no"}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle className="flex items-center gap-2">
                                <AlertTriangle className="h-5 w-5 text-red-500" />
                                ¿Eliminar producto?
                              </AlertDialogTitle>
                              <AlertDialogDescription>
                                Esta acción es irreversible y eliminará el producto <strong>"{product.name}"</strong> del sistema.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancelar</AlertDialogCancel>
                              <AlertDialogAction 
                                onClick={() => handleDelete(product.id)}
                                className="bg-red-600 hover:bg-red-700"
                                disabled={liberta === "no"}
                              >
                                Eliminar
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  );
                })}
              </div>
              
              {/* Botón para cargar más productos */}
              {paginatedProducts.length < sortedProducts.length && (
                <div className="mt-8 flex justify-center">
                  <Button 
                    onClick={loadMoreProducts}
                    variant="outline"
                    className="border-blue-200 hover:bg-blue-50 text-blue-700 min-w-[200px]"
                    disabled={loadingMoreProducts}
                  >
                    {loadingMoreProducts ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Cargando...
                      </>
                    ) : (
                      <>
                        <RefreshCw className="h-4 w-4 mr-2" />
                        Cargar más productos ({paginatedProducts.length} de {sortedProducts.length})
                      </>
                    )}
                  </Button>
                </div>
              )}
            </>
          )}
        </CardContent>
