import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { doc, getDoc, collection, query, where, getDocs, limit } from 'firebase/firestore';
import { db } from '@/firebase';
import { AdvancedHeader } from '@/components/layout/AdvancedHeader';
import { TopPromoBar } from '@/components/layout/TopPromoBar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ProductCard } from '@/components/products/ProductCard';
import { useCart } from '@/contexts/CartContext';
import { toast } from '@/hooks/use-toast';
import { recordProductView } from '@/lib/product-analytics';
import { useAuth } from '@/contexts/AuthContext';

import React, { useState, useEffect } from 'react';
import {
  ChevronLeft,
  ShoppingCart,
  Plus,
  Minus,
  Star,
  Shield,
  Truck,
  Share2,
  ArrowLeft,
  MapPin,
  Mail
} from 'lucide-react';

import { Product } from '@/contexts/CartContext';

// Utilidad para crear slugs SEO-friendly
function slugify(text: string): string {
  return text
    .toString()
    .normalize('NFD')
    .replace(/\p{Diacritic}/gu, '')
    .replace(/[^\w\s-]/g, '')
    .trim()
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .toLowerCase();
}


// Carrusel de productos similares con estilo Mercado Libre
type SimilarProductsCarouselProps = {
  products: Product[];
  onViewDetails: (prod: Product) => void;
};

const SimilarProductsCarousel: React.FC<SimilarProductsCarouselProps> = ({ products, onViewDetails }) => {
  const [start, setStart] = React.useState(0);
  const [hoveredIndex, setHoveredIndex] = React.useState<number | null>(null);
  const [maxVisible, setMaxVisible] = React.useState(5);
  
  React.useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      if (width >= 1536) {
        setMaxVisible(6);
      } else if (width >= 1280) {
        setMaxVisible(5);
      } else if (width >= 1024) {
        setMaxVisible(4);
      } else if (width >= 768) {
        setMaxVisible(3);
      } else {
        setMaxVisible(2);
      }
    };
    
    handleResize(); // Inicializar
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  const canPrev = start > 0;
  const canNext = start + maxVisible < products.length;

  const handlePrev = () => {
    if (canPrev) setStart(Math.max(0, start - maxVisible));
  };
  
  const handleNext = () => {
    if (canNext) setStart(Math.min(products.length - maxVisible, start + maxVisible));
  };

  return (
    <div className="relative w-full py-2">
      {/* Navegación */}
      <div className="flex items-center">
        {/* Botón anterior */}
        <button
          onClick={handlePrev}
          disabled={!canPrev}
          className={`absolute left-0 z-10 rounded-full w-10 h-10 flex items-center justify-center border border-gray-200 bg-white shadow-lg transition-all ${
            !canPrev ? 'opacity-0 cursor-default' : 'opacity-95 hover:opacity-100 hover:border-blue-300 hover:text-blue-500'
          }`}
          style={{ transform: 'translateX(-50%)' }}
          aria-label="Anterior"
        >
          <svg width="16" height="16" fill="none" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24">
            <path d="M15 18l-6-6 6-6"/>
          </svg>
        </button>
        
        {/* Productos en el carrusel */}
        <div className="flex gap-4 overflow-hidden w-full mx-4">
          {products.slice(start, start + maxVisible).map((prod, index) => (
            <div 
              key={prod.id} 
              className="w-full flex-shrink-0 transition-all"
              onMouseEnter={() => setHoveredIndex(index)}
              onMouseLeave={() => setHoveredIndex(null)}
            >
              <div 
                onClick={() => onViewDetails(prod)}
                className={`bg-white rounded-lg overflow-hidden border ${
                  hoveredIndex === index 
                    ? 'border-blue-300 shadow-md' 
                    : 'border-gray-200'
                } cursor-pointer transition-all h-full flex flex-col`}
              >
                {/* Imagen del producto */}
                <div className="pt-2 px-2 bg-white flex items-center justify-center h-48 relative">
                  <img 
                    src={prod.image} 
                    alt={prod.name}
                    className="max-h-full max-w-full object-contain transition-transform duration-300"
                    style={{
                      transform: hoveredIndex === index ? 'scale(1.05)' : 'scale(1)'
                    }}
                  />
                  
                  {/* Badge de oferta */}
                  {prod.isOffer && prod.originalPrice && (
                    <span className="absolute top-2 left-2 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded">
                      {Math.round((1 - (prod.price / prod.originalPrice)) * 100)}% OFF
                    </span>
                  )}
                </div>
                
                {/* Información del producto */}
                <div className="p-4 flex-1 flex flex-col border-t border-gray-100">
                  {/* Nombre del producto con clamp para 2 líneas */}
                  <h3 className="text-sm text-gray-700 line-clamp-2 mb-2 h-10">{prod.name}</h3>
                  
                  {/* Precio y descuento */}
                  <div className="mt-auto">
                    <p className="text-lg font-semibold text-gray-900">${prod.price.toLocaleString()}</p>
                    {prod.isOffer && prod.originalPrice && (
                      <div className="flex items-center gap-1.5">
                        <span className="text-xs line-through text-gray-500">${prod.originalPrice.toLocaleString()}</span>
                      </div>
                    )}
                    
                    {/* Envío gratis (simulado) */}
                    {prod.price > 100 && (
                      <p className="text-xs font-medium text-green-600 mt-1">Envío gratis</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Botón siguiente */}
        <button
          onClick={handleNext}
          disabled={!canNext}
          className={`absolute right-0 z-10 rounded-full w-10 h-10 flex items-center justify-center border border-gray-200 bg-white shadow-lg transition-all ${
            !canNext ? 'opacity-0 cursor-default' : 'opacity-95 hover:opacity-100 hover:border-blue-300 hover:text-blue-500'
          }`}
          style={{ transform: 'translateX(50%)' }}
          aria-label="Siguiente"
        >
          <svg width="16" height="16" fill="none" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" viewBox="0 0 24 24">
            <path d="M9 18l6-6-6-6"/>
          </svg>
        </button>
      </div>
      
      {/* Botón "Ver todos" */}
      {products.length > maxVisible && (
        <div className="flex justify-center mt-6">
          <button
            onClick={() => window.location.href = '/?category=' + encodeURIComponent(products[0].category || '')}
            className="px-5 py-2 rounded-lg bg-white border border-blue-500 text-blue-600 font-medium hover:bg-blue-50 transition-colors flex items-center gap-2 text-sm"
          >
            Ver todos los productos similares
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M5 12h14"></path>
              <path d="m12 5 7 7-7 7"></path>
            </svg>
          </button>
        </div>
      )}
    </div>
  );
};

// Permite URLs tipo /producto/:productId-:slug
const ProductDetailPage = () => {
  const { productId: param } = useParams<{ productId: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [product, setProduct] = useState<Product | null>(null);
  const [similarProducts, setSimilarProducts] = useState<Product[]>([]);
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [viewRecorded, setViewRecorded] = useState(false);
  const [activeImageIndex, setActiveImageIndex] = useState(0);
  const [activeImageUrl, setActiveImageUrl] = useState('');
  const [activeTab, setActiveTab] = useState<'descripcion' | 'especificaciones'>('descripcion');
  const { addToCart } = useCart();
  const { user } = useAuth();
  const [categories, setCategories] = useState<string[]>([]);
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);

  // Extraer productId y slug de la URL
  let productId = param;
  let urlSlug = '';
  if (param && param.includes('-')) {
    const lastDash = param.lastIndexOf('-');
    productId = param.substring(0, lastDash);
    urlSlug = param.substring(lastDash + 1);
  }

  // Agregar URL canónica para SEO
  useEffect(() => {
    if (product) {
      document.title = `${product.name} | REGALA ALGO`;
      
      // Crear meta tag canónico si no existe
      let canonicalUrl = `${window.location.origin}/producto/${product.id}-${slugify(product.name)}`;
      let link = document.querySelector("link[rel='canonical']") as HTMLLinkElement;
      
      if (!link) {
        link = document.createElement('link');
        link.setAttribute('rel', 'canonical');
        document.head.appendChild(link);
      }
      
      link.setAttribute('href', canonicalUrl);
    } else {
      document.title = 'Producto | REGALA ALGO';
    }
  }, [product]);

  // Cargar datos del producto
  useEffect(() => {
    const fetchProduct = async () => {
      if (!productId) return;
      
      setLoading(true);
      setError(null);
      
      try {
        // Obtener producto
        const docRef = doc(db, "products", productId);
        const docSnap = await getDoc(docRef);
        
        if (docSnap.exists()) {
          const productData = { ...docSnap.data(), id: docSnap.id } as Product;
          
          // Registrar vista si aún no se ha hecho
          if (!viewRecorded && user) {
            recordProductView(productId, user.id);
            setViewRecorded(true);
          }
          
          setProduct(productData);
          setActiveImageUrl(productData.image);
          
          // Cargar productos similares
          const similarQuery = query(
            collection(db, "products"),
            where("category", "==", productData.category),
            where("id", "!=", productId),
            limit(10)
          );
          
          const querySnapshot = await getDocs(similarQuery);
          const similarProds = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }) as Product);
          setSimilarProducts(similarProds);
        } else {
          setError("Producto no encontrado");
        }
      } catch (err) {
        console.error("Error fetching product:", err);
        setError("Error al cargar el producto");
      } finally {
        setLoading(false);
      }
    };
    
    fetchProduct();
  }, [productId, user?.id, viewRecorded]);

  // Cargar categorías
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "categories"));
        const cats = ["Todos", ...querySnapshot.docs.map(doc => doc.data().name)];
        setCategories(cats);
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    };
    
    fetchCategories();
  }, []);

  // Manejadores
  const handleAddToCart = () => {
    if (product) {
      addToCart(product, quantity);
      toast({
        title: "¡Producto agregado!",
        description: `${quantity}x ${product.name} agregado a tu carrito`,
      });
    }
  };

  // Navegación avanzada con slug
  const goToProduct = (prod: Product) => {
    navigate(`/producto/${prod.id}-${slugify(prod.name)}`);
  };

  const incrementQuantity = () => {
    if (product && quantity < product.stock) {
      setQuantity(quantity + 1);
    }
  };

  const decrementQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
    }
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: product?.name || 'Producto REGALA ALGO',
        text: product?.description || 'Mira este producto',
        url: window.location.href
      })
      .catch(error => console.log('Error al compartir', error));
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Enlace copiado",
        description: "El enlace al producto ha sido copiado al portapapeles",
      });
    }
  };

  // Para navegar entre imágenes
  const handlePrevImage = () => {
    if (product) {
      const allImages = [product.image, ...(product.additionalImages || []).filter(img => img)];
      const newIndex = (activeImageIndex - 1 + allImages.length) % allImages.length;
      setActiveImageIndex(newIndex);
      setActiveImageUrl(allImages[newIndex]);
    }
  };

  const handleNextImage = () => {
    if (product) {
      const allImages = [product.image, ...(product.additionalImages || []).filter(img => img)];
      const newIndex = (activeImageIndex + 1) % allImages.length;
      setActiveImageIndex(newIndex);
      setActiveImageUrl(allImages[newIndex]);
    }
  };

  // Función para abrir la imagen en modo completo
  const openFullSizeImage = (url: string) => {
    setActiveImageUrl(url);
    setIsImageModalOpen(true);
  };

  if (loading) {
    return (
      <div className="flex flex-col min-h-screen">
        <AdvancedHeader 
          selectedCategory="" 
          setSelectedCategory={(cat) => navigate('/?category=' + encodeURIComponent(cat))}
          categories={categories}
          setCategories={setCategories}
        />
        <div className="container mx-auto px-4 pt-32 pb-16 md:pt-40 md:pb-24 flex items-center justify-center min-h-[70vh]">
          <div className="text-center">
            <div className="w-16 h-16 mx-auto mb-6 border-4 border-orange-500 border-t-transparent rounded-full animate-spin"></div>
            <h2 className="text-xl font-semibold mb-2 text-gray-700">Cargando producto</h2>
            <p className="text-gray-500">Estamos obteniendo toda la información para ti...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col min-h-screen">
        <AdvancedHeader 
          selectedCategory="" 
          setSelectedCategory={(cat) => navigate('/?category=' + encodeURIComponent(cat))}
          categories={categories}
          setCategories={setCategories}
        />
        <div className="container mx-auto px-4 pt-32 pb-16 md:pt-40 md:pb-24 flex items-center justify-center min-h-[70vh]">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
            <h2 className="text-xl font-semibold text-red-600 mb-4">Error al cargar el producto</h2>
            <p className="text-gray-700 mb-4">{error}</p>
            <button 
              onClick={() => navigate('/')}
              className="bg-orange-500 hover:bg-orange-600 text-white font-medium py-2 px-4 rounded transition-colors"
            >
              Volver a la tienda
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="flex flex-col min-h-screen">
        <AdvancedHeader 
          selectedCategory="" 
          setSelectedCategory={(cat) => navigate('/?category=' + encodeURIComponent(cat))}
          categories={categories}
          setCategories={setCategories}
        />
        <div className="container mx-auto px-4 py-28 md:py-32 text-center min-h-[70vh] flex flex-col items-center justify-center">
          <div className="max-w-md w-full bg-white p-8 rounded-xl shadow-md border border-gray-100">
            <div className="w-20 h-20 mx-auto mb-6 bg-red-100 rounded-full flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-500">
                <circle cx="12" cy="12" r="10"/>
                <line x1="12" y1="8" x2="12" y2="12"/>
                <line x1="12" y1="16" x2="12.01" y2="16"/>
              </svg>
            </div>
            <h1 className="text-2xl md:text-3xl font-bold mb-4">Producto no encontrado</h1>
            <p className="mb-6 text-gray-600">El producto que estás buscando no existe o ha sido eliminado.</p>
            <Button onClick={() => navigate('/')} className="bg-orange-600 hover:bg-orange-700">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a la tienda
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <AdvancedHeader 
        selectedCategory={product?.category || ""} 
        setSelectedCategory={(cat) => {
          navigate('/?category=' + encodeURIComponent(cat));
        }} 
        categories={categories}
        setCategories={setCategories}
      />
      
      <main className="w-full px-0 sm:px-4 pt-24 pb-16 md:pt-32 md:pb-24">
        {/* Navegación con breadcrumbs */}
        <div className="flex flex-wrap items-center mb-8 md:mb-12 text-xs sm:text-sm text-gray-600 bg-gray-50 p-3 sm:p-4 rounded-lg">
          <Button
            variant="ghost"
            size="sm"
            className="p-0 h-auto font-normal hover:bg-transparent hover:text-orange-600"
            onClick={() => navigate('/')}
          >
            Inicio
          </Button>
          <span className="mx-1 sm:mx-2">/</span>
          <Button
            variant="ghost"
            size="sm"
            className="p-0 h-auto font-normal hover:bg-transparent hover:text-orange-600 max-w-[120px] sm:max-w-none truncate"
            onClick={() => navigate('/?category=' + encodeURIComponent(product.category))}
          >
            {product.category}
          </Button>
          <span className="mx-1 sm:mx-2">/</span>
          <span className="text-gray-900 font-medium truncate max-w-[150px] sm:max-w-[300px]">{product.name}</span>
        </div>
        
        {/* Detalles del producto */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-10 mb-16">
          {/* Columna izquierda: galería y productos similares en desktop */}
          <div className="space-y-4 flex flex-col">
            {/* Imagen principal con zoom efecto */}
            <div className="relative rounded-xl overflow-hidden shadow-xl bg-white p-4 border border-gray-100 group">
              <div className="overflow-hidden rounded-lg bg-white flex items-center justify-center cursor-zoom-in" onClick={() => openFullSizeImage(activeImageUrl || product.image)}>
                <img 
                  src={activeImageUrl || product.image}
                  alt={product.name}
                  className="w-full transition-transform duration-500 group-hover:scale-105"
                  style={{
                    height: "480px",
                    maxHeight: "480px",
                    objectFit: "contain",
                    objectPosition: "center",
                    padding: "10px"
                  }}
                />
              </div>
              
              {/* Image Gallery Navigation - Always show if there's at least one image */}
              <div className="absolute top-1/2 left-0 right-0 flex justify-between px-3 transform -translate-y-1/2">
                <button 
                  onClick={handlePrevImage}
                  className={`rounded-full bg-white hover:bg-gray-100 p-2 shadow-lg border border-gray-200 text-gray-700 hover:text-orange-500 transition-all ${
                    (!product.additionalImages || product.additionalImages.filter(img => img).length === 0) 
                      ? 'opacity-30 cursor-not-allowed' 
                      : 'opacity-90 hover:opacity-100'
                  }`}
                  aria-label="Previous image"
                  disabled={!product.additionalImages || product.additionalImages.filter(img => img).length === 0}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M15 18l-6-6 6-6"/>
                  </svg>
                </button>
                <button 
                  onClick={handleNextImage}
                  className={`rounded-full bg-white hover:bg-gray-100 p-2 shadow-lg border border-gray-200 text-gray-700 hover:text-orange-500 transition-all ${
                    (!product.additionalImages || product.additionalImages.filter(img => img).length === 0) 
                      ? 'opacity-30 cursor-not-allowed' 
                      : 'opacity-90 hover:opacity-100'
                  }`}
                  aria-label="Next image"
                  disabled={!product.additionalImages || product.additionalImages.filter(img => img).length === 0}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M9 18l6-6-6-6"/>
                  </svg>
                </button>
              </div>
              <Badge 
                className="absolute top-6 right-6 bg-white/90 text-foreground border-0 shadow-md px-3 py-1.5 text-sm"
              >
                {product.category}
              </Badge>
              {product.stock < 5 && (
                <Badge 
                  variant="destructive"
                  className="absolute top-6 left-6 shadow-md px-3 py-1.5 text-sm"
                >
                  ¡Últimas {product.stock} unidades!
                </Badge>
              )}
              {product.isOffer && (
                <div className="absolute top-0 right-0 w-24 h-24 overflow-hidden">
                  <div className="bg-red-500 text-white font-bold py-1 rotate-45 transform origin-bottom-right absolute top-0 right-0 w-[170%] text-center shadow-lg">
                    {product.originalPrice && Math.round((1 - (product.price / product.originalPrice)) * 100)}% OFF
                  </div>
                </div>
              )}
            </div>
            {/* Miniaturas */}
            <div className="flex gap-3 justify-center mt-4 overflow-x-auto px-2 pb-2">
              <button 
                onClick={() => {
                  setActiveImageUrl(product.image);
                  setActiveImageIndex(0);
                }}
                className={`flex-shrink-0 rounded-lg overflow-hidden bg-white ${
                  activeImageIndex === 0 
                    ? 'border-2 border-orange-500 ring-2 ring-orange-200' 
                    : 'border border-gray-200 hover:border-orange-300'
                }`}
                style={{ width: '80px', height: '80px' }}
              >
                <div className="w-full h-full flex items-center justify-center p-1">
                  <img 
                    src={product.image} 
                    alt={product.name} 
                    className="max-h-full max-w-full object-contain" 
                  />
                </div>
              </button>
              
              {product.additionalImages && product.additionalImages.map((img, i) => (
                img ? (
                  <button 
                    key={i}
                    onClick={() => {
                      setActiveImageUrl(img);
                      setActiveImageIndex(i + 1);
                    }}
                    className={`flex-shrink-0 rounded-lg overflow-hidden bg-white ${
                      activeImageIndex === i + 1 
                        ? 'border-2 border-orange-500 ring-2 ring-orange-200' 
                        : 'border border-gray-200 hover:border-orange-300'
                    }`}
                    style={{ width: '80px', height: '80px' }}
                  >
                    <div className="w-full h-full flex items-center justify-center p-1">
                      <img 
                        src={img} 
                        alt={`${product.name} - Imagen ${i+1}`} 
                        className="max-h-full max-w-full object-contain" 
                      />
                    </div>
                  </button>
                ) : null
              ))}
              
              {(!product.additionalImages || product.additionalImages.filter(img => img).length === 0) && [...Array(3)].map((_, i) => (
                <button 
                  key={i} 
                  className="flex-shrink-0 rounded-lg overflow-hidden border border-gray-200 hover:border-orange-300 transition-colors bg-white opacity-60"
                  style={{ width: '80px', height: '80px' }}
                >
                  <div className="w-full h-full flex items-center justify-center p-1">
                    <img 
                      src={product.image} 
                      alt={`${product.name} vista ${i+1}`} 
                      className="max-h-full max-w-full object-contain" 
                    />
                  </div>
                </button>
              ))}
            </div>
            {/* Productos similares solo en desktop (lg+) */}
            <div className="hidden lg:block">
              <div className="bg-white rounded-xl p-5 mt-8 border border-gray-200 shadow-2xl">
                <div className="border-b pb-3 mb-4">
                  <span className="text-orange-600 font-medium text-xs block">TAMBIÉN TE PUEDE GUSTAR</span>
                  <h2 className="text-lg font-bold text-gray-800">Productos similares</h2>
                </div>
                {similarProducts && similarProducts.length > 0 ? (
                  <div className="flex gap-6 justify-center">
                    {similarProducts.slice(0, 4).map((similar) => (
                      <div 
                        key={similar.id}
                        className="w-1/4 cursor-pointer"
                        onClick={() => goToProduct(similar)}
                      >
                        <div className="bg-white rounded-lg overflow-hidden border border-gray-200 hover:border-orange-300 transition-all h-full flex flex-col">
                          <div className="pt-2 px-2 bg-white flex items-center justify-center h-20 relative">
                            <img 
                              src={similar.image} 
                              alt={similar.name}
                              className="max-h-full max-w-full object-contain hover:scale-110 transition-transform duration-300"
                            />
                          </div>
                          <div className="p-2 flex-1 flex flex-col border-t border-gray-100">
                            <h3 className="text-xs text-gray-700 line-clamp-1">{similar.name}</h3>
                            <p className="text-sm font-semibold text-gray-900 mt-auto">${similar.price.toLocaleString()}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="py-4 text-center">
                    <p className="text-sm text-gray-500">No hay productos similares disponibles.</p>
                    <p className="text-xs text-gray-400 mt-1">Estamos trabajando para ampliar nuestro catálogo.</p>
                  </div>
                )}
                <Button
                  variant="outline"
                  size="sm"
                  className="mt-4 border-orange-300 text-orange-600 hover:text-orange-700 hover:bg-orange-50 w-full"
                  onClick={() => navigate('/?category=' + encodeURIComponent(product.category || ''))}
                >
                  Ver todos <span className="ml-1">→</span>
                </Button>
              </div>
            </div>
          </div>
          
          {/* Info del producto */}
          <div className="bg-white rounded-xl p-6 md:p-8 border border-gray-100 shadow-sm space-y-6">
            {/* Encabezado con marca y código */}
            <div className="flex items-center justify-between mb-2">
              <span className="bg-orange-100 text-orange-800 text-xs px-3 py-1 rounded-full font-medium">
                REGALA ALGO
              </span>
              <span className="text-xs text-gray-500">
                Código: {product.id?.substring(0, 8) || 'FS-' + Math.floor(Math.random() * 10000)}
              </span>
            </div>
            
            <div>
              <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold leading-tight">{product.name}</h1>
              
              {/* Rating */}
              <div className="flex flex-wrap items-center gap-2 mt-3">
                <div className="flex">
                  {[...Array(5)].map((_, i) => (
                    <Star
                      key={i}
                      className={`h-4 w-4 sm:h-5 sm:w-5 ${i < 4 ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`}
                    />
                  ))}
                </div>
                <span className="text-xs sm:text-sm text-muted-foreground">(128 reseñas)</span>
                {/* <Button variant="link" className="text-xs sm:text-sm p-0 h-auto text-orange-600">Ver reseñas</Button> */}
              </div>
            </div>
            
            {/* Precio con badge de descuento */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex flex-wrap items-center gap-3">
                <span className="text-3xl sm:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-orange-600 to-orange-500">
                  ${product.price.toLocaleString()}
                </span>
                {(product.discount || product.isOffer) && product.originalPrice && (
                  <>
                    <span className="text-base sm:text-lg text-gray-500 line-through">
                      ${product.originalPrice.toLocaleString()}
                    </span>
                    <span className="bg-red-100 text-red-700 text-xs font-bold px-2 py-1 rounded">
                      {Math.round((1 - (product.price / product.originalPrice)) * 100)}% OFF
                    </span>
                  </>
                )}
              </div>
              <p className="text-xs text-gray-500 mt-1">
                Precio incluye impuestos • Envío calculado al finalizar la compra
              </p>
            </div>
            
            <Separator />
            
            {/* Descripción con tabs */}
            <div className="rounded-lg border overflow-hidden">
              <div className="flex text-sm border-b">
                <button 
                  onClick={() => setActiveTab('descripcion')}
                  className={`px-4 py-2 font-medium flex-1 sm:flex-none transition-colors ${
                    activeTab === 'descripcion' 
                      ? 'bg-orange-50 text-orange-700 border-b-2 border-orange-500' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Descripción
                </button>
                <button 
                  onClick={() => setActiveTab('especificaciones')}
                  className={`px-4 py-2 font-medium flex-1 sm:flex-none transition-colors ${
                    activeTab === 'especificaciones' 
                      ? 'bg-orange-50 text-orange-700 border-b-2 border-orange-500' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Especificaciones
                </button>
              </div>
              
              {/* Tab content */}
              <div className="p-4 bg-white">
                {activeTab === 'descripcion' ? (
                  <div>
                    <p className="text-gray-700 leading-relaxed">{product.description || "Sin descripción disponible."}</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <h4 className="font-medium text-base">Especificaciones del producto</h4>
                    {product.specifications && product.specifications.length > 0 ? (
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-2 mt-3">
                        {product.specifications.map((spec, index) => (
                          <div key={index} className="flex items-start">
                            <span className="text-orange-500 mr-2">•</span>
                            <span className="text-sm text-gray-700">{spec}</span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <ul className="list-disc list-inside space-y-1 text-gray-600 text-sm pl-2">
                        <li>Marca: REGALA ALGO</li>
                        <li>Categoría: {product.category}</li>
                        <li>Garantía: 12 meses</li>
                        <li>Stock disponible: {product.stock} unidades</li>
                      </ul>
                    )}
                  </div>
                )}
              </div>
            </div>
            
            {/* Resto del contenido se omite para mantener el código conciso */}

          </div>
        </div>
        
        {/* Resto del contenido se omite para mantener el código conciso */}
        
      </main>
      
      {/* Modal de imagen completa */}
      {isImageModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90 transition-opacity">
          <div className="relative max-w-6xl w-full flex flex-col items-center">
            {/* Botón cerrar */}
            <button
              className="absolute top-4 right-4 bg-white/80 text-gray-800 rounded-full p-2 shadow-lg border border-gray-200 hover:bg-gray-100 transition-all z-10"
              onClick={() => setIsImageModalOpen(false)}
              aria-label="Cerrar vista completa"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-6 h-6">
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
              </svg>
            </button>
            
            {/* Imagen ampliada */}
            <div className="relative">
              <img
                src={activeImageUrl || product.image}
                alt={product.name}
                className="max-h-[85vh] max-w-full rounded-lg shadow-2xl cursor-zoom-out object-contain"
                onClick={() => setIsImageModalOpen(false)}
              />
              
              {/* Controles de navegación */}
              {(product.additionalImages && product.additionalImages.filter(img => img).length > 0) && (
                <div className="absolute top-1/2 left-0 right-0 flex justify-between px-4 transform -translate-y-1/2">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      handlePrevImage();
                    }}
                    className="rounded-full bg-white/70 hover:bg-white p-3 shadow-lg text-gray-800 hover:text-orange-600 transition-all"
                    aria-label="Imagen anterior"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M15 18l-6-6 6-6"/>
                    </svg>
                  </button>
                  
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      handleNextImage();
                    }}
                    className="rounded-full bg-white/70 hover:bg-white p-3 shadow-lg text-gray-800 hover:text-orange-600 transition-all"
                    aria-label="Imagen siguiente"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M9 18l6-6-6-6"/>
                    </svg>
                  </button>
                </div>
              )}
            </div>
            
            {/* Contador de imágenes */}
            <div className="mt-4 text-white text-sm">
              <span className="bg-black/50 px-3 py-1.5 rounded-full">
                {activeImageIndex + 1} / {product.additionalImages ? product.additionalImages.filter(img => img).length + 1 : 1}
              </span>
            </div>
            
            {/* Texto ayuda */}
            <div className="mt-2 text-white/60 text-sm">
              Haz clic en la imagen o el botón para cerrar
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductDetailPage;
