import React, { useEffect, useState } from 'react';
import { auth, db } from '@/firebase';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { 
  Users, 
  Package, 
  ShoppingCart, 
  TrendingUp,
  Settings,
  BarChart3,
  DollarSign,
  AlertCircle,
  Home,
  Bell,
  Tag
} from 'lucide-react';
import { ProductForm } from '@/components/admin/ProductForm';
import { UsersList } from '@/components/admin/UsersList';
import { OrdersList } from '@/components/admin/OrdersList';
import { DashboardStats } from '@/components/admin/DashboardStats';
import { CategoryManager } from '@/components/admin/CategoryManager';
import { useNavigate } from 'react-router-dom';
import { collection, getDocs, getDoc } from "firebase/firestore";
// (ya importado arriba)
import { createUserWithEmailAndPassword } from "firebase/auth";
import { setDoc, doc } from "firebase/firestore";
import { Input } from "@/components/ui/input";
import { toast } from "@/hooks/use-toast";
import { RevisionList } from "@/components/admin/RevisionList";
import { ProductAnalyticsView } from '@/components/admin/ProductAnalytics';
import InfoManager from '@/components/admin/InfoManager';
import Sidebar from '@/components/admin/Sidebar';

export const AdminPanel: React.FC = () => {
  const [isAdmin, setIsAdmin] = useState(false);
  const [isSubAdmin, setIsSubAdmin] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('dashboard');
  const [orders, setOrders] = useState<any[]>([]);
  const [subName, setSubName] = useState('');
  const [subEmail, setSubEmail] = useState('');
  const [subPassword, setSubPassword] = useState('');
  const [subLoading, setSubLoading] = useState(false);
  const [subAccounts, setSubAccounts] = useState<any[]>([]);
  const [subAccountsLoading, setSubAccountsLoading] = useState(false);
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [showCreateSubForm, setShowCreateSubForm] = useState(false);
  const [products, setProducts] = useState<any[]>([]);

  console.log('AdminPanel rendered, user:', user);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (firebaseUser) => {
      if (firebaseUser) {
        const userDoc = await getDoc(doc(db, "users", firebaseUser.uid));
        const userData = userDoc.data();
        if (firebaseUser.email === "admin@gmail.com") {
          setIsAdmin(true);
          setIsSubAdmin(false);
        } else if (userData?.subCuenta === "si") {
          setIsAdmin(false);
          setIsSubAdmin(true);
        } else {
          setIsAdmin(false);
          setIsSubAdmin(false);
        }
      } else {
        setIsAdmin(false);
        setIsSubAdmin(false);
      }
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const fetchOrders = async () => {
      const querySnapshot = await getDocs(collection(db, "pedidos"));
      const docs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log("Pedidos desde Firestore:", docs);
      setOrders(docs);
    };
    fetchOrders();
  }, []);

  useEffect(() => {
    const fetchProducts = async () => {
      const querySnapshot = await getDocs(collection(db, "products"));
      const docs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setProducts(docs);
    };
    fetchProducts();
  }, []);

  const handleCreateSubAccount = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubLoading(true);
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, subEmail, subPassword);
      await setDoc(doc(db, "users", userCredential.user.uid), {
        uid: userCredential.user.uid,
        name: subName,
        email: subEmail,
        subCuenta: "si"
      });
      toast({
        title: "Subcuenta creada",
        description: "El sub-administrador fue creado exitosamente.",
      });
      setSubName('');
      setSubEmail('');
      setSubPassword('');
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo crear la subcuenta",
        variant: "destructive"
      });
    } finally {
      setSubLoading(false);
    }
  };

  const fetchSubAccounts = async () => {
    setSubAccountsLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "users"));
      const subs = querySnapshot.docs
        .map(doc => ({ id: doc.id, ...doc.data() } as { id: string; subCuenta?: string; name?: string; email?: string }))
        .filter(u => u.subCuenta === "si");
      setSubAccounts(subs);
    } catch (e) {
      toast({ title: "Error", description: "No se pudieron cargar las subcuentas", variant: "destructive" });
    }
    setSubAccountsLoading(false);
  };

  const handleDeleteSubAccount = async (uid: string) => {
    if (!window.confirm("¿Seguro que deseas eliminar esta subcuenta? Esta acción no se puede deshacer.")) return;
    setDeletingId(uid);
    try {
      await setDoc(doc(db, "users", uid), {}, { merge: false });
      setSubAccounts(subAccounts.filter(u => u.id !== uid));
      toast({ title: "Subcuenta eliminada", description: "La subcuenta fue eliminada correctamente." });
    } catch (e: any) {
      toast({ title: "Error", description: e.message || "No se pudo eliminar", variant: "destructive" });
    }
    setDeletingId(null);
  };

  const handleDarLiberta = async (uid: string) => {
    try {
      await setDoc(doc(db, "users", uid), { liberta: "si" }, { merge: true });
      toast({
        title: "Liberta otorgada",
        description: "La subcuenta ahora tiene liberta.",
      });
      setSubAccounts(subAccounts.map(u =>
        u.id === uid ? { ...u, liberta: "si" } : u
      ));
    } catch (e: any) {
      toast({
        title: "Error",
        description: e.message || "No se pudo dar liberta",
        variant: "destructive"
      });
    }
  };

  const handleToggleLiberta = async (uid: string, current: string) => {
    const newValue = current === "si" ? "no" : "si";
    try {
      await setDoc(doc(db, "users", uid), { liberta: newValue }, { merge: true });
      toast({
        title: newValue === "si" ? "Liberta otorgada" : "Liberta retirada",
        description: newValue === "si"
          ? "La subcuenta ahora tiene liberta."
          : "La subcuenta ya no tiene liberta.",
      });
      setSubAccounts(subAccounts.map(u =>
        u.id === uid ? { ...u, liberta: newValue } : u
      ));
    } catch (e: any) {
      toast({
        title: "Error",
        description: e.message || "No se pudo actualizar liberta",
        variant: "destructive"
      });
    }
  };

  useEffect(() => {
    if (activeTab === "subaccounts" && isAdmin) fetchSubAccounts();
  }, [activeTab, isAdmin]);

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center">Cargando...</div>;
  }

  if (!isAdmin && !isSubAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-red-50">
        <Card className="w-96 shadow-2xl border-0">
          <CardContent className="p-8 text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertCircle className="h-8 w-8 text-red-600" />
            </div>
            <h2 className="text-2xl font-bold mb-4 text-red-600">Acceso Denegado</h2>
            <p className="text-muted-foreground mb-6">
              No tienes permisos para acceder al panel de administración.
            </p>
            <Button 
              onClick={() => navigate('/')}
              className="gradient-orange hover:opacity-90 transition-all"
            >
              <Home className="mr-2 h-4 w-4" />
              Volver al Inicio
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const ofertas = products.filter((p: any) => p.category?.toLowerCase() === "ofertas");

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50">
      {/* Advanced Header - Mobile Responsive */}
      <div className="bg-white border-b shadow-lg">
        <div className="container mx-auto px-4 py-4 md:py-6">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4 sm:gap-0">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 md:w-12 md:h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center shadow-lg">
                <Settings className="h-5 w-5 md:h-6 md:w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl md:text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
                  Panel de Administración
                </h1>
                <p className="text-xs md:text-sm text-muted-foreground mt-1 hidden sm:block">
                  Gestiona tu tienda del conjunto de manera profesional
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2 md:space-x-4">
              <div className="relative group">
                <button className="p-2 rounded-full hover:bg-gray-100 relative">
                  <Bell className="h-5 w-5 text-gray-600" />
                  <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                </button>
                <div className="hidden group-hover:block absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl z-50 border p-2 animate-in fade-in-10 zoom-in-95">
                  <div className="p-2 border-b">
                    <h3 className="text-sm font-bold">Notificaciones</h3>
                  </div>
                  <div className="max-h-64 overflow-y-auto">
                    <div className="p-3 hover:bg-gray-50 border-b">
                      <p className="text-sm font-medium">Nuevo pedido recibido</p>
                      <p className="text-xs text-gray-500 mt-1">Hace 5 minutos</p>
                    </div>
                    <div className="p-3 hover:bg-gray-50">
                      <p className="text-sm font-medium">Inventario bajo: Producto X</p>
                      <p className="text-xs text-gray-500 mt-1">Hace 2 horas</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <Badge className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-3 py-1 md:px-4 md:py-2 text-xs md:text-sm font-medium">
                {isAdmin ? "👑 " : "🔑 "}
                <span className="hidden sm:inline">{isAdmin ? "Admin: " : "Subadmin: "}</span>
                {user?.name}
              </Badge>
            </div>
          </div>
        </div>
      </div>

      {/* Main content with sidebar */}
      <div className="flex relative">
        {/* Sidebar */}
        <Sidebar 
          activeTab={activeTab} 
          setActiveTab={setActiveTab} 
          isAdmin={isAdmin} 
          isSubAdmin={isSubAdmin} 
          navigateToHome={() => navigate('/')}
        />
        
        {/* Main content area */}
        <div className="flex-1 p-4 md:p-6 overflow-auto">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-8">
            {/* Hidden tabs list for state management - visually hidden */}
            <TabsList className="hidden">
              {!isSubAdmin && <TabsTrigger value="dashboard">Dashboard</TabsTrigger>}
              <TabsTrigger value="products">Products</TabsTrigger>
              <TabsTrigger value="orders">Orders</TabsTrigger>
              {!isSubAdmin && (
                <>
                  <TabsTrigger value="users">Users</TabsTrigger>
                  <TabsTrigger value="categories">Categories</TabsTrigger>
                  <TabsTrigger value="subaccounts">Subaccounts</TabsTrigger>
                  <TabsTrigger value="analytics">Analytics</TabsTrigger>
                  <TabsTrigger value="info">Info</TabsTrigger>
                </>
              )}
            </TabsList>

            {/* Tab Contents */}
            {!isSubAdmin && (
              <TabsContent value="dashboard" className="space-y-6">
                {/* Header responsive */}
                <div className="flex flex-col sm:flex-row items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold mb-4 sm:mb-0">Dashboard</h2>
                  <div className="flex space-x-2 w-full sm:w-auto">
                    <select className="bg-white rounded-lg border border-gray-200 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-orange-500">
                      <option>Últimos 7 días</option>
                      <option>Últimos 30 días</option>
                      <option>Este año</option>
                    </select>
                    <Button className="bg-gradient-to-r from-orange-500 to-red-500 rounded-lg">
                      Actualizar
                    </Button>
                  </div>
                </div>
                
                {/* Stats Cards - Responsive Grid */}
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 md:gap-6 mb-8">
                  <Card className="bg-gradient-to-r from-blue-600 to-blue-700 text-white border-0 shadow-xl transform transition-all hover:scale-105">
                    <CardContent className="p-4 md:p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-blue-100 text-xs sm:text-sm">Estado del Sistema</p>
                          <p className="text-xl md:text-2xl font-bold">🟢 Activo</p>
                        </div>
                        <div className="w-12 h-12 rounded-full bg-blue-500/20 flex items-center justify-center">
                          <BarChart3 className="h-6 w-6 md:h-8 md:w-8 text-blue-200" />
                        </div>
                      </div>
                      <div className="mt-4 pt-3 border-t border-blue-500/30">
                        <p className="text-xs text-blue-100">Última actualización: hace 5 min</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gradient-to-r from-green-600 to-green-700 text-white border-0 shadow-xl transform transition-all hover:scale-105">
                    <CardContent className="p-4 md:p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-green-100 text-xs sm:text-sm">Ventas de Hoy</p>
                          <p className="text-xl md:text-2xl font-bold">$45,230</p>
                        </div>
                        <div className="w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center">
                          <DollarSign className="h-6 w-6 md:h-8 md:w-8 text-green-200" />
                        </div>
                      </div>
                      <div className="mt-4 pt-3 border-t border-green-500/30 flex items-center">
                        <TrendingUp className="h-4 w-4 text-green-200 mr-1" />
                        <p className="text-xs text-green-100">+12% vs ayer</p>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gradient-to-r from-purple-600 to-purple-700 text-white border-0 shadow-xl transform transition-all hover:scale-105 sm:col-span-2 md:col-span-1">
                    <CardContent className="p-4 md:p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-purple-100 text-xs sm:text-sm">Pedidos Pendientes</p>
                          <p className="text-xl md:text-2xl font-bold">
                            {
                              orders.filter(order =>
                                ["pending", "en espera", "espera"].includes(
                                  String(order.status).toLowerCase().trim()
                                )
                              ).length
                            }
                          </p>
                        </div>
                        <div className="w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center">
                          <AlertCircle className="h-6 w-6 md:h-8 md:w-8 text-purple-200" />
                        </div>
                      </div>
                      <div className="mt-4 pt-3 border-t border-purple-500/30">
                        <p className="text-xs text-purple-100">Requieren atención inmediata</p>
                      </div>
                    </CardContent>
                  </Card>
                </div>
                <DashboardStats />
              </TabsContent>
            )}

            <TabsContent value="products" className="space-y-6">
              <ProductForm />
            </TabsContent>

            <TabsContent value="orders" className="space-y-6">
              <div className="bg-white rounded-xl shadow p-4 md:p-6 mb-6">
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6">
                  <h2 className="text-xl font-bold flex items-center">
                    <ShoppingCart className="h-5 w-5 text-orange-500 mr-2" />
                    Gestión de Pedidos
                  </h2>
                  
                  {/* Filtros y búsqueda optimizados para móvil */}
                  <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
                    <div className="relative w-full sm:w-auto">
                      <input 
                        type="text" 
                        placeholder="Buscar pedido..." 
                        className="w-full sm:w-auto px-4 py-2 pr-8 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-orange-400"
                      />
                      <svg className="w-4 h-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                    <select className="px-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-orange-400">
                      <option value="">Estado: Todos</option>
                      <option value="pendiente">Pendientes</option>
                      <option value="completado">Completados</option>
                      <option value="cancelado">Cancelados</option>
                    </select>
                  </div>
                </div>
                
                <div className="overflow-hidden">
                  <OrdersList />
                </div>
              </div>
              
              {/* Botón flotante para acciones rápidas en móvil */}
              <button
                className="fixed z-30 md:hidden bottom-24 right-6 w-14 h-14 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 flex items-center justify-center shadow-lg text-white"
              >
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
              </button>
            </TabsContent>

            {/* Solo para admin principal */}
            {!isSubAdmin && (
              <>
                <TabsContent value="users" className="space-y-6">
                  <UsersList />
                </TabsContent>
                
                <TabsContent value="categories" className="space-y-6">
                  <CategoryManager />
                </TabsContent>
                
                <TabsContent value="subaccounts" className="space-y-6">
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-xl font-bold flex items-center gap-2">
                        <Users className="h-5 w-5 text-orange-500" />
                        Gestión de Subcuentas
                      </h3>
                      <Button
                        onClick={() => setShowCreateSubForm(v => !v)}
                        className="bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold px-4 py-2 rounded-xl shadow hover:scale-105 transition-all"
                      >
                        {showCreateSubForm ? "Cerrar" : "Nueva Subcuenta"}
                      </Button>
                    </div>
                    {showCreateSubForm && (
                      <div className="mb-8">
                        <h4 className="text-lg font-semibold mb-2 flex items-center gap-2">
                          <Users className="h-5 w-5 text-orange-500" />
                          Crear Subcuenta (Sub-administrador)
                        </h4>
                        <form
                          onSubmit={handleCreateSubAccount}
                          className="flex flex-col md:flex-row gap-4 items-stretch"
                        >
                          <Input
                            placeholder="Nombre completo"
                            value={subName}
                            onChange={e => setSubName(e.target.value)}
                            required
                            className="flex-1 bg-orange-50 border-orange-200 focus:ring-orange-400"
                          />
                          <Input
                            placeholder="Correo electrónico"
                            type="email"
                            value={subEmail}
                            onChange={e => setSubEmail(e.target.value)}
                            required
                            className="flex-1 bg-orange-50 border-orange-200 focus:ring-orange-400"
                          />
                          <Input
                            placeholder="Contraseña"
                            type="password"
                            value={subPassword}
                            onChange={e => setSubPassword(e.target.value)}
                            required
                            className="flex-1 bg-orange-50 border-orange-200 focus:ring-orange-400"
                          />
                          <Button
                            type="submit"
                            disabled={subLoading}
                            className="bg-gradient-to-r from-orange-500 to-red-500 text-white font-bold px-6 py-3 rounded-xl shadow hover:scale-105 transition-all"
                          >
                            {subLoading ? (
                              <span className="flex items-center gap-2">
                                <svg className="animate-spin h-5 w-5 text-white" viewBox="0 0 24 24">
                                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"/>
                                </svg>
                                Creando...
                              </span>
                            ) : (
                              <span className="flex items-center gap-2">
                                <Users className="h-5 w-5" />
                                Crear Subcuenta
                              </span>
                            )}
                          </Button>
                        </form>
                        <div className="mt-3 text-sm text-gray-500">
                          Las subcuentas pueden acceder a funciones administrativas limitadas. Recuerda compartir las credenciales solo con personas de confianza.
                        </div>
                      </div>
                    )}
                    {subAccountsLoading ? (
                      <div className="text-center py-8">Cargando subcuentas...</div>
                    ) : subAccounts.length === 0 ? (
                      <div className="text-center text-gray-500 py-8">No hay subcuentas registradas.</div>
                    ) : (
                      <div className="overflow-x-auto">
                        <table className="min-w-full text-sm">
                          <thead>
                            <tr className="bg-orange-50">
                              <th className="px-4 py-2 text-left">Nombre</th>
                              <th className="px-4 py-2 text-left">Correo</th>
                              <th className="px-4 py-2 text-left">UID</th>
                              <th className="px-4 py-2 text-left">Acciones</th>
                            </tr>
                          </thead>
                          <tbody>
                            {subAccounts.map(sub => (
                              <tr key={sub.id} className="border-b">
                                <td className="px-4 py-2">{sub.name}</td>
                                <td className="px-4 py-2">{sub.email}</td>
                                <td className="px-4 py-2 font-mono text-xs">{sub.id}</td>
                                <td className="px-4 py-2">
                                  <Button
                                    variant="destructive"
                                    size="sm"
                                    disabled={deletingId === sub.id}
                                    onClick={() => handleDeleteSubAccount(sub.id)}
                                  >
                                    {deletingId === sub.id ? "Eliminando..." : "Eliminar"}
                                  </Button>
                                  <Button
                                    onClick={() => handleToggleLiberta(sub.id, sub.liberta)}
                                    className={`ml-2 ${sub.liberta === "si"
                                      ? "bg-red-100 text-red-600 hover:bg-red-200"
                                      : "bg-green-100 text-green-700 hover:bg-green-200"}`}
                                    variant="outline"
                                    size="sm"
                                  >
                                    {sub.liberta === "si" ? "Quitar Liberta" : "Dar Liberta"}
                                  </Button>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                  <RevisionList />
                </TabsContent>
                
                <TabsContent value="analytics" className="space-y-6">
                  <ProductAnalyticsView />
                </TabsContent>
                
                <TabsContent value="info" className="space-y-6">
                  <InfoManager />
                </TabsContent>
              </>
            )}
          </Tabs>
          
          {/* Ofertas Especiales - Si hay */}
          {ofertas.length > 0 && (
            <div className="mt-16 px-2 sm:px-0">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-2">
                  <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-lg">🔥</span>
                  </div>
                  <h2 className="text-xl md:text-2xl font-bold text-orange-600">
                    Ofertas Especiales
                  </h2>
                </div>
                <Button 
                  className="text-sm bg-orange-50 text-orange-700 hover:bg-orange-100 border-orange-200"
                  variant="outline"
                >
                  Ver todas
                </Button>
              </div>
              
              {/* Scrollable horizontal en móvil, grid en escritorio */}
              <div className="relative -mx-4 px-4 sm:mx-0 sm:px-0">
                <div className="flex sm:grid overflow-x-auto pb-6 sm:pb-0 sm:overflow-x-visible sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6 snap-x">
                  {ofertas.map((oferta) => (
                    <div 
                      key={oferta.id} 
                      className="bg-white rounded-xl shadow-lg p-4 sm:p-6 flex flex-col min-w-[280px] sm:min-w-0 border border-orange-100 snap-start hover:shadow-xl transition-shadow duration-300 relative overflow-hidden"
                    >
                      {/* Badge de oferta */}
                      <div className="absolute -right-10 top-5 bg-gradient-to-r from-orange-500 to-red-500 text-white px-12 py-1 transform rotate-45 text-xs font-medium">
                        Oferta
                      </div>
                      
                      <div className="flex items-center mb-4">
                        <img src={oferta.image} alt={oferta.name} className="w-16 h-16 object-cover rounded-lg mr-4" />
                        <div>
                          <h3 className="text-base font-bold text-orange-700">{oferta.name}</h3>
                          <div className="flex items-center mt-1">
                            <span className="text-orange-600 font-medium mr-2">${oferta.price?.toLocaleString()}</span>
                            <span className="text-xs text-gray-400 line-through">${Math.round(oferta.price * 1.2).toLocaleString()}</span>
                          </div>
                        </div>
                      </div>
                      
                      <p className="text-sm text-muted-foreground mb-4 line-clamp-2">{oferta.description}</p>
                      
                      <div className="flex items-center mt-auto">
                        <Button size="sm" variant="outline" className="text-xs border-orange-200 text-orange-700 hover:bg-orange-50 flex-1">
                          Editar
                        </Button>
                        <Button size="sm" className="text-xs bg-gradient-to-r from-orange-500 to-red-500 ml-2 flex-1">
                          Ver detalles
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* Indicador de scroll en móvil */}
                <div className="mt-4 flex justify-center gap-1 sm:hidden">
                  {[...Array(Math.min(ofertas.length, 4))].map((_, i) => (
                    <div key={i} className="w-2 h-2 rounded-full bg-orange-200" />
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
