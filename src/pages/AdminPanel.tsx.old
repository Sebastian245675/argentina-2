import React, { useEffect, useState } from 'react';
import { auth, db } from '@/firebase';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger } from "@/components/ui/drawer";
import { 
  Users, 
  Package, 
  ShoppingCart, 
  TrendingUp,
  Settings,
  BarChart3,
  DollarSign,
  AlertCircle,
  Home,
  Bell,
  Tag,
  CheckCircle,
  ChevronRight,
  ChevronLeft,
  HelpCircle,
  Bot,
  Menu,
  X,
  Sparkles,
  BrainCircuit,
  ImagePlus,
  MessageSquareText,
  ArrowRight
} from 'lucide-react';
import { ProductForm } from '@/components/admin/ProductForm';
import { UsersList } from '@/components/admin/UsersList';
import { OrdersList } from '@/components/admin/OrdersList';
import { DashboardStats } from '@/components/admin/DashboardStats';
import { CategoryManager } from '@/components/admin/CategoryManager';
import { useNavigate } from 'react-router-dom';
import { collection, getDocs, getDoc } from "firebase/firestore";
// (ya importado arriba)
import { createUserWithEmailAndPassword } from "firebase/auth";
import { setDoc, doc } from "firebase/firestore";
import { Input } from "@/components/ui/input";
import { toast } from "@/hooks/use-toast";
import { RevisionList } from "@/components/admin/RevisionList";
import { ProductAnalyticsView } from '@/components/admin/ProductAnalytics';
import InfoManager from '@/components/admin/InfoManager';

// Componente de ítem de la barra lateral
interface SidebarItemProps {
  icon: React.ReactNode;
  label: string;
  active: boolean;
  collapsed: boolean;
  onClick: () => void;
  tooltip: string;
}

const SidebarItem: React.FC<SidebarItemProps> = ({ icon, label, active, collapsed, onClick, tooltip }) => {
  return (
    <TooltipProvider delayDuration={200}>
      <Tooltip>
        <TooltipTrigger asChild>
          <div
            className={`flex items-center space-x-3 p-2 rounded-lg cursor-pointer transition-all ${
              active 
                ? 'bg-indigo-50 text-indigo-700 font-medium' 
                : 'text-gray-600 hover:bg-gray-100'
            }`}
            onClick={onClick}
          >
            <div className="flex-shrink-0">
              {icon}
            </div>
            {!collapsed && <span className="text-sm">{label}</span>}
          </div>
        </TooltipTrigger>
        <TooltipContent side="right" className={collapsed ? "block" : "hidden"}>
          <p className="text-sm">{tooltip || label}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

// Componente de divisor de la barra lateral
const SidebarDivider: React.FC<{ collapsed: boolean }> = ({ collapsed }) => (
  <div className={`${collapsed ? 'mx-2' : 'mx-3'} border-t my-2`}></div>
);

// Componente del panel de administración
export const AdminPanel: React.FC = () => {
  const [isAdmin, setIsAdmin] = useState(false);
  const [isSubAdmin, setIsSubAdmin] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('dashboard');
  const [orders, setOrders] = useState<any[]>([]);
  const [subName, setSubName] = useState('');
  const [subEmail, setSubEmail] = useState('');
  const [subPassword, setSubPassword] = useState('');
  const [subLoading, setSubLoading] = useState(false);
  const [subAccounts, setSubAccounts] = useState<any[]>([]);
  const [subAccountsLoading, setSubAccountsLoading] = useState(false);
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [showCreateSubForm, setShowCreateSubForm] = useState(false);
  const [products, setProducts] = useState<any[]>([]);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [showAIAssistantPreview, setShowAIAssistantPreview] = useState(false);

  console.log('AdminPanel rendered, user:', user);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (firebaseUser) => {
      if (firebaseUser) {
        const userDoc = await getDoc(doc(db, "users", firebaseUser.uid));
        const userData = userDoc.data();
        if (firebaseUser.email === "admin@gmail.com") {
          setIsAdmin(true);
          setIsSubAdmin(false);
        } else if (userData?.subCuenta === "si") {
          setIsAdmin(false);
          setIsSubAdmin(true);
        } else {
          setIsAdmin(false);
          setIsSubAdmin(false);
        }
      } else {
        setIsAdmin(false);
        setIsSubAdmin(false);
      }
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const fetchOrders = async () => {
      const querySnapshot = await getDocs(collection(db, "pedidos"));
      const docs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log("Pedidos desde Firestore:", docs); // <-- AGREGA ESTO
      setOrders(docs);
    };
    fetchOrders();
  }, []);

  // Agrega este useEffect para cargar productos
  useEffect(() => {
    const fetchProducts = async () => {
      const querySnapshot = await getDocs(collection(db, "products"));
      const docs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setProducts(docs);
    };
    fetchProducts();
  }, []);

  // Función para crear subcuenta
  const handleCreateSubAccount = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubLoading(true);
    try {
      // 1. Crear usuario en Auth
      const userCredential = await createUserWithEmailAndPassword(auth, subEmail, subPassword);
      // 2. Crear documento en "users" con campo subCuenta: "si"
      await setDoc(doc(db, "users", userCredential.user.uid), {
        uid: userCredential.user.uid,
        name: subName,
        email: subEmail,
        subCuenta: "si",
        liberta: "no", // Por defecto, las subcuentas no tienen permiso para editar directamente
        createdAt: new Date()
      });
      toast({
        title: "Subcuenta creada",
        description: "El sub-administrador fue creado exitosamente.",
      });
      setSubName('');
      setSubEmail('');
      setSubPassword('');
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo crear la subcuenta",
        variant: "destructive"
      });
    } finally {
      setSubLoading(false);
    }
  };

  const fetchSubAccounts = async () => {
    setSubAccountsLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "users"));
      const subs = querySnapshot.docs
        .map(doc => ({ id: doc.id, ...doc.data() } as { id: string; subCuenta?: string; name?: string; email?: string }))
        .filter(u => u.subCuenta === "si");
      setSubAccounts(subs);
    } catch (e) {
      toast({ title: "Error", description: "No se pudieron cargar las subcuentas", variant: "destructive" });
    }
    setSubAccountsLoading(false);
  };

  const handleDeleteSubAccount = async (uid: string) => {
    if (!window.confirm("¿Seguro que deseas eliminar esta subcuenta? Esta acción no se puede deshacer.")) return;
    setDeletingId(uid);
    try {
      await setDoc(doc(db, "users", uid), {}, { merge: false }); // Borra el doc
      // Opcional: Si tienes Cloud Functions, aquí deberías borrar también del Auth
      setSubAccounts(subAccounts.filter(u => u.id !== uid));
      toast({ title: "Subcuenta eliminada", description: "La subcuenta fue eliminada correctamente." });
    } catch (e: any) {
      toast({ title: "Error", description: e.message || "No se pudo eliminar", variant: "destructive" });
    }
    setDeletingId(null);
  };

  const handleDarLiberta = async (uid: string) => {
    try {
      await setDoc(doc(db, "users", uid), { liberta: "si" }, { merge: true });
      toast({
        title: "Liberta otorgada",
        description: "La subcuenta ahora tiene liberta.",
      });
      // Opcional: Actualiza el estado local si lo deseas
      setSubAccounts(subAccounts.map(u =>
        u.id === uid ? { ...u, liberta: "si" } : u
      ));
    } catch (e: any) {
      toast({
        title: "Error",
        description: e.message || "No se pudo dar liberta",
        variant: "destructive"
      });
    }
  };

  const handleToggleLiberta = async (uid: string, current: string) => {
    const newValue = current === "si" ? "no" : "si";
    try {
      await setDoc(doc(db, "users", uid), { liberta: newValue }, { merge: true });
      toast({
        title: newValue === "si" ? "Liberta otorgada" : "Liberta retirada",
        description: newValue === "si"
          ? "La subcuenta ahora tiene liberta."
          : "La subcuenta ya no tiene liberta.",
      });
      setSubAccounts(subAccounts.map(u =>
        u.id === uid ? { ...u, liberta: newValue } : u
      ));
    } catch (e: any) {
      toast({
        title: "Error",
        description: e.message || "No se pudo actualizar liberta",
        variant: "destructive"
      });
    }
  };

  useEffect(() => {
    if (activeTab === "subaccounts" && isAdmin) fetchSubAccounts();
    // eslint-disable-next-line
  }, [activeTab, isAdmin]);

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center">Cargando...</div>;
  }

  if (!isAdmin && !isSubAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 to-violet-50">
        <Card className="w-96 shadow-2xl border-0">
          <CardContent className="p-8 text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertCircle className="h-8 w-8 text-red-600" />
            </div>
            <h2 className="text-2xl font-bold mb-4 text-red-600">Acceso Denegado</h2>
            <p className="text-muted-foreground mb-6">
              No tienes permisos para acceder al panel de administración.
            </p>
            <Button 
              onClick={() => navigate('/')}
              className="bg-gradient-to-r from-indigo-500 to-violet-500 text-white hover:opacity-90 transition-all"
            >
              <Home className="mr-2 h-4 w-4" />
              Volver al Inicio
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Mueve esta línea ARRIBA del return, dentro del componente:
  const ofertas = products.filter((p: any) => p.category?.toLowerCase() === "ofertas");

  return (
    <div className="flex h-screen overflow-hidden bg-slate-50">
      {/* Sidebar para pantallas grandes */}
      <div className={`hidden lg:flex transition-all duration-300 ease-in-out ${sidebarCollapsed ? 'w-20' : 'w-64'} h-screen bg-white border-r shadow-lg flex-col z-10`}>
        {/* Sidebar Header */}
        <div className="p-4 border-b flex items-center justify-between">
          {!sidebarCollapsed && (
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-indigo-600 to-violet-500 rounded-lg flex items-center justify-center shadow-lg">
                <Settings className="h-5 w-5 text-white" />
              </div>
              <div>
                <h2 className="font-bold text-lg text-gray-800">Fuego Shop</h2>
                <p className="text-xs text-gray-500">Panel de Control</p>
              </div>
            </div>
          )}
          {sidebarCollapsed && (
            <div className="w-10 h-10 bg-gradient-to-r from-indigo-600 to-violet-500 rounded-lg flex items-center justify-center shadow-lg mx-auto">
              <Settings className="h-5 w-5 text-white" />
            </div>
          )}
          <Button 
            variant="ghost" 
            size="sm" 
            className="p-1" 
            onClick={() => setSidebarCollapsed(prev => !prev)}
          >
            {sidebarCollapsed ? <ChevronRight className="h-5 w-5" /> : <ChevronLeft className="h-5 w-5" />}
          </Button>
        </div>
        
        {/* Sidebar Content */}
        <div className="flex-1 py-4 overflow-y-auto">
          <div className="space-y-1 px-3">
            {/* Enlaces de navegación */}
            {!isSubAdmin && (
              <SidebarItem 
                icon={<BarChart3 className="h-5 w-5" />} 
                label="Dashboard" 
                active={activeTab === 'dashboard'} 
                collapsed={sidebarCollapsed}
                onClick={() => setActiveTab('dashboard')}
                tooltip="Vista general de estadísticas y métricas de la tienda"
              />
            )}
            
            <SidebarItem 
              icon={<Package className="h-5 w-5" />} 
              label="Productos" 
              active={activeTab === 'products'} 
              collapsed={sidebarCollapsed}
              onClick={() => setActiveTab('products')}
              tooltip="Gestionar productos de la tienda"
            />
            
            <SidebarItem 
              icon={<ShoppingCart className="h-5 w-5" />} 
              label="Pedidos" 
              active={activeTab === 'orders'} 
              collapsed={sidebarCollapsed}
              onClick={() => setActiveTab('orders')}
              tooltip="Ver y gestionar pedidos de clientes"
            />
            
            <SidebarItem 
              icon={<CheckCircle className="h-5 w-5 text-green-500" />} 
              label="Revisiones" 
              active={activeTab === 'revisions'} 
              collapsed={sidebarCollapsed}
              onClick={() => setActiveTab('revisions')}
              tooltip="Aprobar o rechazar cambios pendientes de revisión"
            />
            
            <SidebarItem 
              icon={<Settings className="h-5 w-5 text-blue-500" />} 
              label="Info Secciones" 
              active={activeTab === 'info'} 
              collapsed={sidebarCollapsed}
              onClick={() => setActiveTab('info')}
              tooltip="Gestionar información de secciones de la tienda"
            />
            
            {!isSubAdmin && (
              <>
                <SidebarDivider collapsed={sidebarCollapsed} />
                
                <SidebarItem 
                  icon={<Users className="h-5 w-5" />} 
                  label="Usuarios" 
                  active={activeTab === 'users'} 
                  collapsed={sidebarCollapsed}
                  onClick={() => setActiveTab('users')}
                  tooltip="Ver y gestionar usuarios de la tienda"
                />
                
                <SidebarItem 
                  icon={<Tag className="h-5 w-5" />} 
                  label="Categorías" 
                  active={activeTab === 'categories'} 
                  collapsed={sidebarCollapsed}
                  onClick={() => setActiveTab('categories')}
                  tooltip="Gestionar categorías de productos"
                />
                
                <SidebarItem 
                  icon={<Users className="h-5 w-5 text-orange-500" />} 
                  label="Subcuentas" 
                  active={activeTab === 'subaccounts'} 
                  collapsed={sidebarCollapsed}
                  onClick={() => setActiveTab('subaccounts')}
                  tooltip="Administrar cuentas de sub-administradores"
                />
                
                <SidebarItem 
                  icon={<BarChart3 className="h-5 w-5 text-orange-500" />} 
                  label="Analítica" 
                  active={activeTab === 'analytics'} 
                  collapsed={sidebarCollapsed}
                  onClick={() => setActiveTab('analytics')}
                  tooltip="Ver estadísticas avanzadas de la tienda"
                />
              </>
            )}
            
            <SidebarDivider collapsed={sidebarCollapsed} />
            
            {/* Asistente IA - Próximamente */}
            <div 
              className={`mt-4 ${sidebarCollapsed ? 'mx-1 p-2' : 'mx-3 p-3'} 
                cursor-pointer rounded-lg border-2 border-dashed border-violet-200 
                hover:bg-violet-50 transition-all group`}
              onClick={() => setShowAIAssistantPreview(true)}
            >
              <div className="flex items-center space-x-3">
                <div className="bg-gradient-to-r from-violet-500 to-fuchsia-500 rounded-lg p-2 flex-shrink-0">
                  <BrainCircuit className={`${sidebarCollapsed ? 'h-4 w-4' : 'h-5 w-5'} text-white`} />
                </div>
                {!sidebarCollapsed && (
                  <div>
                    <p className="text-sm font-medium text-violet-700">Asistente IA</p>
                    <p className="text-xs text-violet-500">Próximamente</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
        
        {/* Sidebar Footer */}
        <div className="border-t p-4">
          <div className={`flex ${sidebarCollapsed ? 'justify-center' : 'justify-between'} items-center`}>
            {!sidebarCollapsed && (
              <div className="flex flex-col">
                <span className="text-sm font-medium text-gray-700">{user.name}</span>
                <span className="text-xs text-gray-500">
                  {isAdmin ? "Administrador" : "Sub-administrador"}
                </span>
              </div>
            )}
            <Button 
              variant="outline" 
              size="sm"
              className={`${sidebarCollapsed ? '' : 'ml-2'} text-gray-600`}
              onClick={() => navigate('/')}
            >
              <Home className="h-4 w-4" />
              {!sidebarCollapsed && <span className="ml-2">Tienda</span>}
            </Button>
          </div>
        </div>
      </div>
      
      {/* Mobile header & sidebar trigger */}
      <div className="lg:hidden fixed top-0 left-0 w-full bg-white border-b shadow-md z-50">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center space-x-3">
            <DrawerTrigger asChild>
              <Button variant="ghost" size="sm">
                <Menu className="h-5 w-5" />
              </Button>
            </DrawerTrigger>
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-indigo-600 to-violet-500 rounded-lg flex items-center justify-center shadow">
                <Settings className="h-4 w-4 text-white" />
              </div>
              <span className="font-bold text-gray-800">Fuego Shop</span>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Badge className="bg-gradient-to-r from-indigo-500 to-violet-500 text-white px-2 py-1 text-xs">
              {isAdmin ? "👑 Admin" : "🔑 SubAdmin"}
            </Badge>
            <Button 
              onClick={() => navigate('/')}
              variant="ghost"
              size="sm"
            >
              <Home className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
      
      {/* Mobile Drawer Sidebar */}
      <Drawer>
        <DrawerContent className="h-[85vh]">
          <DrawerHeader>
            <DrawerTitle>Fuego Shop - Panel de Control</DrawerTitle>
            <DrawerDescription>Navega por las secciones del panel</DrawerDescription>
          </DrawerHeader>
          <div className="px-4 py-2">
            <div className="space-y-3">
              {/* Enlaces de navegación para móvil */}
              {!isSubAdmin && (
                <div 
                  className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'dashboard' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                  onClick={() => { setActiveTab('dashboard'); }}
                >
                  <BarChart3 className="h-5 w-5" />
                  <span>Dashboard</span>
                </div>
              )}
              
              <div 
                className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'products' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                onClick={() => { setActiveTab('products'); }}
              >
                <Package className="h-5 w-5" />
                <span>Productos</span>
              </div>
              
              <div 
                className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'orders' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                onClick={() => { setActiveTab('orders'); }}
              >
                <ShoppingCart className="h-5 w-5" />
                <span>Pedidos</span>
              </div>
              
              <div 
                className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'revisions' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                onClick={() => { setActiveTab('revisions'); }}
              >
                <CheckCircle className="h-5 w-5 text-green-500" />
                <span>Revisiones</span>
              </div>
              
              <div 
                className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'info' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                onClick={() => { setActiveTab('info'); }}
              >
                <Settings className="h-5 w-5 text-blue-500" />
                <span>Info Secciones</span>
              </div>
              
              {!isSubAdmin && (
                <>
                  <div className="border-t my-3"></div>
                  
                  <div 
                    className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'users' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                    onClick={() => { setActiveTab('users'); }}
                  >
                    <Users className="h-5 w-5" />
                    <span>Usuarios</span>
                  </div>
                  
                  <div 
                    className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'categories' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                    onClick={() => { setActiveTab('categories'); }}
                  >
                    <Tag className="h-5 w-5" />
                    <span>Categorías</span>
                  </div>
                  
                  <div 
                    className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'subaccounts' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                    onClick={() => { setActiveTab('subaccounts'); }}
                  >
                    <Users className="h-5 w-5 text-orange-500" />
                    <span>Subcuentas</span>
                  </div>
                  
                  <div 
                    className={`flex items-center space-x-3 p-3 rounded-lg ${activeTab === 'analytics' ? 'bg-indigo-50 text-indigo-700' : 'hover:bg-gray-100'}`}
                    onClick={() => { setActiveTab('analytics'); }}
                  >
                    <BarChart3 className="h-5 w-5 text-orange-500" />
                    <span>Analítica</span>
                  </div>
                </>
              )}
              
              <div className="border-t my-3"></div>
              
              {/* Asistente IA - Próximamente (móvil) */}
              <div 
                className="p-3 rounded-lg border-2 border-dashed border-violet-200 hover:bg-violet-50"
                onClick={() => setShowAIAssistantPreview(true)}
              >
                <div className="flex items-center space-x-3">
                  <div className="bg-gradient-to-r from-violet-500 to-fuchsia-500 rounded-lg p-2">
                    <BrainCircuit className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-violet-700">Asistente IA</p>
                    <p className="text-xs text-violet-500">Próximamente</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <DrawerFooter>
            <DrawerClose asChild>
              <Button variant="outline">Cerrar</Button>
            </DrawerClose>
          </DrawerFooter>
        </DrawerContent>
      </Drawer>

      {/* Main Content Area */}
      <div className="flex-1 overflow-y-auto pt-16 lg:pt-0">
        <div className="p-6 max-w-7xl mx-auto">
          {/* Page Header */}
          <div className="mb-8">
            <div className="flex flex-wrap items-center justify-between gap-4">
              <div>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-900">
                  {activeTab === 'dashboard' && 'Panel Principal'}
                  {activeTab === 'products' && 'Gestión de Productos'}
                  {activeTab === 'orders' && 'Gestión de Pedidos'}
                  {activeTab === 'revisions' && 'Revisiones Pendientes'}
                  {activeTab === 'info' && 'Información de Secciones'}
                  {activeTab === 'users' && 'Gestión de Usuarios'}
                  {activeTab === 'categories' && 'Gestión de Categorías'}
                  {activeTab === 'subaccounts' && 'Gestión de Subcuentas'}
                  {activeTab === 'analytics' && 'Analítica Avanzada'}
                </h1>
                <p className="text-gray-500 mt-1">
                  {activeTab === 'dashboard' && 'Vista general del rendimiento de la tienda'}
                  {activeTab === 'products' && 'Agregar, editar y gestionar productos de la tienda'}
                  {activeTab === 'orders' && 'Administrar pedidos y solicitudes de clientes'}
                  {activeTab === 'revisions' && 'Revisa y aprueba cambios pendientes'}
                  {activeTab === 'info' && 'Administra la información de las secciones de la tienda'}
                  {activeTab === 'users' && 'Administra usuarios y clientes de la tienda'}
                  {activeTab === 'categories' && 'Configura categorías para organizar productos'}
                  {activeTab === 'subaccounts' && 'Gestiona cuentas de administradores secundarios'}
                  {activeTab === 'analytics' && 'Visualiza estadísticas y métricas detalladas'}
                </p>
              </div>
              
              {activeTab === 'products' && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        className="bg-gradient-to-r from-indigo-600 to-violet-500 text-white hover:opacity-90"
                      >
                        <Package className="h-4 w-4 mr-2" />
                        Nuevo Producto
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Agregar un nuevo producto a la tienda</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
              
              {activeTab === 'categories' && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        className="bg-gradient-to-r from-indigo-600 to-violet-500 text-white hover:opacity-90"
                      >
                        <Tag className="h-4 w-4 mr-2" />
                        Nueva Categoría
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Agregar una nueva categoría de productos</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
            </div>
          </div>
          
          {/* Main Content */}

          {/* Contenido dinámico basado en la pestaña activa */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            {/* Dashboard - solo para admin */}
            {activeTab === 'dashboard' && !isSubAdmin && (
              <div className="space-y-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-800">Resumen General</h2>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="outline" size="sm">
                          <HelpCircle className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">Este panel muestra un resumen de las métricas más importantes de tu tienda</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                  <Card className="bg-gradient-to-r from-indigo-600 to-indigo-700 text-white border-0 shadow-xl">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-indigo-100 text-sm">Estado del Sistema</p>
                          <p className="text-2xl font-bold">🟢 Activo</p>
                        </div>
                        <BarChart3 className="h-8 w-8 text-indigo-200" />
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gradient-to-r from-violet-600 to-violet-700 text-white border-0 shadow-xl">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-violet-100 text-sm">Ventas de Hoy</p>
                          <p className="text-2xl font-bold">$45,230</p>
                        </div>
                        <DollarSign className="h-8 w-8 text-violet-200" />
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gradient-to-r from-fuchsia-600 to-fuchsia-700 text-white border-0 shadow-xl">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-fuchsia-100 text-sm">Pedidos Pendientes</p>
                          <p className="text-2xl font-bold">
                            {
                              orders.filter(order =>
                                ["pending", "en espera", "espera"].includes(
                                  String(order.status).toLowerCase().trim()
                                )
                              ).length
                            }
                          </p>
                        </div>
                        <AlertCircle className="h-8 w-8 text-fuchsia-200" />
                      </div>
                    </CardContent>
                  </Card>
                </div>
                <DashboardStats />
              </div>
            )}
            
            {/* Productos */}
            {activeTab === 'products' && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <div className="flex items-center">
                    <Package className="h-5 w-5 text-indigo-500 mr-2" />
                    <h3 className="text-lg font-semibold text-gray-800">Catálogo de Productos</h3>
                  </div>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="outline" size="sm">
                          <HelpCircle className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">Aquí puedes gestionar todos los productos de tu tienda</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <ProductForm />
              </div>
            )}
            
            {/* Pedidos */}
            {activeTab === 'orders' && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <div className="flex items-center">
                    <ShoppingCart className="h-5 w-5 text-indigo-500 mr-2" />
                    <h3 className="text-lg font-semibold text-gray-800">Gestión de Pedidos</h3>
                  </div>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="outline" size="sm">
                          <HelpCircle className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">Administra los pedidos de tus clientes y actualiza su estado</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <OrdersList />
              </div>
            )}
            
            {/* Usuarios - solo admin */}
            {activeTab === 'users' && !isSubAdmin && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <div className="flex items-center">
                    <Users className="h-5 w-5 text-indigo-500 mr-2" />
                    <h3 className="text-lg font-semibold text-gray-800">Usuarios Registrados</h3>
                  </div>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="outline" size="sm">
                          <HelpCircle className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">Administra los usuarios y clientes de tu tienda</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <UsersList />
              </div>
            )}
            
            {/* Categorías - solo admin */}
            {activeTab === 'categories' && !isSubAdmin && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <div className="flex items-center">
                    <Tag className="h-5 w-5 text-indigo-500 mr-2" />
                    <h3 className="text-lg font-semibold text-gray-800">Categorías de Productos</h3>
                  </div>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="outline" size="sm">
                          <HelpCircle className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">Organiza tu catálogo creando y gestionando categorías</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <CategoryManager />
              </div>
            )}
            
            {/* Subcuentas - solo admin */}
            {activeTab === 'subaccounts' && !isSubAdmin && (
              <div>
                <div className="mb-6 flex justify-between items-center">
                  <div className="flex items-center">
                    <Users className="h-5 w-5 text-indigo-500 mr-2" />
                    <h3 className="text-lg font-semibold text-gray-800">Gestión de Subcuentas</h3>
                  </div>
                  <Button
                    onClick={() => setShowCreateSubForm(v => !v)}
                    className="bg-gradient-to-r from-indigo-600 to-violet-500 text-white font-bold px-4 py-2 rounded-lg shadow hover:opacity-90 transition-all"
                  >
                    {showCreateSubForm ? "Cerrar" : "Nueva Subcuenta"}
                  </Button>
                </div>
                  {showCreateSubForm && (
                    <div className="mb-8">
                      <h4 className="text-lg font-semibold mb-2 flex items-center gap-2">
                        <Users className="h-5 w-5 text-indigo-500" />
                        Crear Subcuenta (Sub-administrador)
                      </h4>
                      <form
                        onSubmit={handleCreateSubAccount}
                        className="flex flex-col md:flex-row gap-4 items-stretch"
                      >
                        <Input
                          placeholder="Nombre completo"
                          value={subName}
                          onChange={e => setSubName(e.target.value)}
                          required
                          className="flex-1 bg-indigo-50 border-indigo-200 focus:ring-indigo-400"
                        />
                        <Input
                          placeholder="Correo electrónico"
                          type="email"
                          value={subEmail}
                          onChange={e => setSubEmail(e.target.value)}
                          required
                          className="flex-1 bg-indigo-50 border-indigo-200 focus:ring-indigo-400"
                        />
                        <Input
                          placeholder="Contraseña"
                          type="password"
                          value={subPassword}
                          onChange={e => setSubPassword(e.target.value)}
                          required
                          className="flex-1 bg-indigo-50 border-indigo-200 focus:ring-indigo-400"
                        />
                        <Button
                          type="submit"
                          disabled={subLoading}
                          className="bg-gradient-to-r from-indigo-600 to-violet-500 text-white font-bold px-6 py-3 rounded-lg shadow hover:opacity-90 transition-all"
                        >
                          {subLoading ? (
                            <span className="flex items-center gap-2">
                              <svg className="animate-spin h-5 w-5 text-white" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"/>
                              </svg>
                              Creando...
                            </span>
                          ) : (
                            <span className="flex items-center gap-2">
                              <Users className="h-5 w-5" />
                              Crear Subcuenta
                            </span>
                          )}
                        </Button>
                      </form>
                      <div className="mt-3 text-sm text-gray-500">
                        Las subcuentas pueden acceder a funciones administrativas limitadas. Recuerda compartir las credenciales solo con personas de confianza.
                      </div>
                    </div>
                  )}
                  {subAccountsLoading ? (
                    <div className="text-center py-8">Cargando subcuentas...</div>
                  ) : subAccounts.length === 0 ? (
                    <div className="text-center text-gray-500 py-8">No hay subcuentas registradas.</div>
                  ) : (
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-sm">
                        <thead>
                          <tr className="bg-indigo-50">
                            <th className="px-4 py-2 text-left">Nombre</th>
                            <th className="px-4 py-2 text-left">Correo</th>
                            <th className="px-4 py-2 text-left">Estado</th>
                            <th className="px-4 py-2 text-left">Acciones</th>
                          </tr>
                        </thead>
                        <tbody>
                          {subAccounts.map(sub => (
                            <tr key={sub.id} className="border-b">
                              <td className="px-4 py-2">{sub.name}</td>
                              <td className="px-4 py-2">{sub.email}</td>
                              <td className="px-4 py-2">
                                {sub.liberta === "si" ? (
                                  <Badge className="bg-green-100 text-green-800 border-green-200">
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                    Con permisos directos
                                  </Badge>
                                ) : (
                                  <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
                                    <AlertCircle className="w-3 h-3 mr-1" />
                                    Requiere revisión
                                  </Badge>
                                )}
                              </td>
                              <td className="px-4 py-2 flex gap-2">
                                <Button
                                  onClick={() => handleToggleLiberta(sub.id, sub.liberta)}
                                  className={`${sub.liberta === "si"
                                    ? "bg-red-100 text-red-600 hover:bg-red-200"
                                    : "bg-green-100 text-green-700 hover:bg-green-200"}`}
                                  variant="outline"
                                  size="sm"
                                >
                                  {sub.liberta === "si" ? "Quitar Permisos" : "Dar Permisos"}
                                </Button>
                                <Button
                                  variant="destructive"
                                  size="sm"
                                  disabled={deletingId === sub.id}
                                  onClick={() => handleDeleteSubAccount(sub.id)}
                                >
                                  {deletingId === sub.id ? "Eliminando..." : "Eliminar"}
                                </Button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              )}
            
              {/* Revisiones */}
              {activeTab === 'revisions' && (
                <div>
                  <div className="mb-6 flex justify-between items-center">
                    <div className="flex items-center">
                      <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                      <h3 className="text-lg font-semibold text-gray-800">Revisiones Pendientes</h3>
                    </div>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="outline" size="sm">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="max-w-xs">Aprueba o rechaza los cambios que requieren revisión</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  <RevisionList />
                </div>
              )}
              
              {/* Analítica - solo admin */}
              {activeTab === 'analytics' && !isSubAdmin && (
                <div>
                  <div className="mb-6 flex justify-between items-center">
                    <div className="flex items-center">
                      <BarChart3 className="h-5 w-5 text-indigo-500 mr-2" />
                      <h3 className="text-lg font-semibold text-gray-800">Análisis de Ventas y Productos</h3>
                    </div>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="outline" size="sm">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="max-w-xs">Visualiza datos avanzados sobre el rendimiento de tu tienda</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  <ProductAnalyticsView />
                </div>
              )}
              
              {/* Info Secciones */}
              {activeTab === 'info' && (
                <div>
                  <div className="mb-6 flex justify-between items-center">
                    <div className="flex items-center">
                      <Settings className="h-5 w-5 text-blue-500 mr-2" />
                      <h3 className="text-lg font-semibold text-gray-800">Configuración de Secciones</h3>
                    </div>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="outline" size="sm">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="max-w-xs">Administra el contenido de las secciones informativas de la tienda</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  <InfoManager />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Diálogo del Asistente de IA - Próximamente */}
      {showAIAssistantPreview && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full mx-4 overflow-hidden">
            <div className="bg-gradient-to-r from-violet-500 to-fuchsia-500 p-5">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="bg-white/20 p-2 rounded-full backdrop-blur-sm">
                    <BrainCircuit className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h2 className="text-xl font-bold text-white">Asistente IA - Fuego Shop</h2>
                    <p className="text-violet-100 text-sm">Tu compañero de marketing y ventas</p>
                  </div>
                </div>
                <Button 
                  variant="ghost" 
                  onClick={() => setShowAIAssistantPreview(false)}
                  className="text-white hover:bg-white/20"
                >
                  <X className="h-5 w-5" />
                </Button>
              </div>
            </div>
            
            <div className="p-6">
              <div className="flex items-center gap-4 mb-6">
                <Sparkles className="h-8 w-8 text-violet-500" />
                <h3 className="text-lg font-semibold text-gray-800">¡Próximamente!</h3>
              </div>
              
              <p className="text-gray-600 mb-4">
                Nuestro asistente de IA está siendo preparado para ayudarte a potenciar tu negocio. Pronto podrás:
              </p>
              
              <div className="space-y-4 mb-6">
                <div className="flex gap-3 items-start">
                  <div className="bg-indigo-100 p-1 rounded-full">
                    <MessageSquareText className="h-5 w-5 text-indigo-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-800">Generación de Contenido</p>
                    <p className="text-sm text-gray-600">Crea descripciones de productos, textos promocionales y contenido para redes sociales.</p>
                  </div>
                </div>
                
                <div className="flex gap-3 items-start">
                  <div className="bg-violet-100 p-1 rounded-full">
                    <ImagePlus className="h-5 w-5 text-violet-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-800">Generación de Imágenes</p>
                    <p className="text-sm text-gray-600">Crea imágenes profesionales para tus productos y campañas publicitarias.</p>
                  </div>
                </div>
                
                <div className="flex gap-3 items-start">
                  <div className="bg-fuchsia-100 p-1 rounded-full">
                    <TrendingUp className="h-5 w-5 text-fuchsia-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-800">Análisis de Tendencias</p>
                    <p className="text-sm text-gray-600">Recibe recomendaciones basadas en datos para mejorar tus ventas.</p>
                  </div>
                </div>
              </div>
              
              <div className="border-t pt-4 flex justify-end">
                <Button 
                  className="bg-gradient-to-r from-indigo-600 to-violet-500 text-white"
                  onClick={() => setShowAIAssistantPreview(false)}
                >
                  <ArrowRight className="h-4 w-4 mr-2" />
                  Entendido
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Mini sección de ofertas */}
      {ofertas.length > 0 && !sidebarCollapsed && (
        <div className="hidden lg:block w-64 bg-white border-l p-4 overflow-y-auto">
          <h4 className="text-sm font-medium text-gray-500 mb-3 flex items-center">
            <Tag className="h-4 w-4 mr-2 text-indigo-500" />
            OFERTAS DESTACADAS
          </h4>
          <div className="space-y-3">
            {ofertas.slice(0, 5).map((oferta) => (
              <div key={oferta.id} className="border border-indigo-100 rounded-lg p-2 bg-indigo-50/50 hover:bg-indigo-50 transition-colors">
                <div className="flex items-center space-x-2">
                  {oferta.image ? (
                    <img src={oferta.image} alt={oferta.name} className="w-10 h-10 object-cover rounded" />
                  ) : (
                    <div className="w-10 h-10 bg-indigo-100 rounded flex items-center justify-center">
                      <Package className="h-5 w-5 text-indigo-400" />
                    </div>
                  )}
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-800 truncate">{oferta.name}</p>
                    <p className="text-xs text-indigo-600 font-bold">${oferta.price?.toLocaleString()}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
