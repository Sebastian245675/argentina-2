import React, { useEffect, useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Trash2, Plus, Edit, ChevronDown, ChevronRight, Filter, RefreshCcw, List, Eye } from "lucide-react";
import { db } from "@/firebase";
import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc } from "firebase/firestore";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";

export const CategoryManager = () => {
  // Actualizamos el modelo para incluir parentId (categoría padre)
  const [categories, setCategoriesState] = useState<{ 
    id: string; 
    name: string; 
    image?: string;
    parentId?: string | null;
  }[]>([]);
  const [newCategory, setNewCategory] = useState("");
  const [newImage, setNewImage] = useState("");
  const [newParentId, setNewParentId] = useState<string | null>(null);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editingName, setEditingName] = useState("");
  const [editingImage, setEditingImage] = useState("");
  const [editingParentId, setEditingParentId] = useState<string | null>(null);
  
  // Estado para la carga progresiva
  const [expandedCategories, setExpandedCategories] = useState<Record<string, boolean>>({});
  const [viewMode, setViewMode] = useState<'compact' | 'detailed'>('compact');
  const [loadedItems, setLoadedItems] = useState<number>(10); // Número inicial de categorías cargadas
  const [isLoading, setIsLoading] = useState<boolean>(false);
  
  // Filtrado de categorías
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [activeTab, setActiveTab] = useState<string>("main");
  
  // Separamos las categorías principales (sin padre) de las subcategorías
  const mainCategories = categories.filter(cat => !cat.parentId);
  const subCategories = categories.filter(cat => cat.parentId);
  
  // Función para manejar la expansión/colapso de categorías
  const toggleCategoryExpansion = (categoryId: string) => {
    setExpandedCategories(prev => ({
      ...prev,
      [categoryId]: !prev[categoryId]
    }));
  };
  
  // Función para cargar más categorías
  const loadMoreItems = () => {
    setIsLoading(true);
    // Simulamos un pequeño retraso para mostrar el efecto de carga
    setTimeout(() => {
      setLoadedItems(prev => prev + 10);
      setIsLoading(false);
    }, 500);
  };

  const fetchCategories = async () => {
    const querySnapshot = await getDocs(collection(db, "categories"));
    const categoryList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as any));
    setCategoriesState(categoryList);
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const handleAdd = async () => {
    if (!newCategory.trim()) return;
    await addDoc(collection(db, "categories"), { 
      name: newCategory.trim(), 
      image: newImage.trim(),
      parentId: newParentId // Puede ser null (categoría principal) o el ID de una categoría padre
    });
    setNewCategory("");
    setNewImage("");
    setNewParentId(null);
    fetchCategories();
  };

  const handleDelete = async (id: string) => {
    // Primero verificamos si hay subcategorías que dependen de esta categoría
    const subCats = categories.filter(cat => cat.parentId === id);
    
    if (subCats.length > 0) {
      // Si hay subcategorías, podríamos mostrar un mensaje de advertencia o manejar esto automáticamente
      if (!window.confirm(`Esta categoría tiene ${subCats.length} subcategoría(s). Si la eliminas, las subcategorías se convertirán en categorías principales. ¿Deseas continuar?`)) {
        return;
      }
      
      // Actualizar las subcategorías para que no tengan padre
      for (const subCat of subCats) {
        await updateDoc(doc(db, "categories", subCat.id), { parentId: null });
      }
    }
    
    await deleteDoc(doc(db, "categories", id));
    fetchCategories();
  };

  const handleEdit = async (id: string) => {
    if (!editingName.trim()) return;
    
    // Verificar que no estemos creando un ciclo (una categoría no puede ser hija de sí misma o de sus descendientes)
    if (editingParentId === id) {
      alert("Una categoría no puede ser subcategoría de sí misma.");
      return;
    }
    
    // Verificar si editingParentId es descendiente de id (evitar ciclos)
    let currentParentId = editingParentId;
    while (currentParentId) {
      const parent = categories.find(cat => cat.id === currentParentId);
      if (parent?.id === id) {
        alert("No se puede crear un ciclo en la jerarquía de categorías.");
        return;
      }
      currentParentId = parent?.parentId || null;
    }
    
    await updateDoc(doc(db, "categories", id), { 
      name: editingName.trim(), 
      image: editingImage.trim(),
      parentId: editingParentId
    });
    
    setEditingId(null);
    setEditingName("");
    setEditingImage("");
    setEditingParentId(null);
    fetchCategories();
  };

  return (
    <Card>
      <CardHeader className="bg-gradient-to-r from-orange-50 to-amber-50 pb-4">
        <div className="flex justify-between items-center">
          <CardTitle className="flex items-center gap-2">
            <List className="h-5 w-5 text-orange-600" />
            <span>Categorías de Productos</span>
          </CardTitle>
          
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm"
              className="flex items-center gap-1 text-xs border-orange-200"
              onClick={() => fetchCategories()}
            >
              <RefreshCcw className="h-3 w-3" /> Actualizar
            </Button>
            <div className="bg-orange-100 text-orange-800 rounded-md px-2 py-1 text-sm">
              {categories.length} categorías
            </div>
          </div>
        </div>
        
        <Tabs value={activeTab} onValueChange={setActiveTab} className="mt-4">
          <TabsList className="grid grid-cols-3 mb-2">
            <TabsTrigger value="main">Principales</TabsTrigger>
            <TabsTrigger value="sub">Subcategorías</TabsTrigger>
            <TabsTrigger value="all">Ver Todo</TabsTrigger>
          </TabsList>
          
          <div className="flex items-center justify-between pt-4">
            <div className="text-sm text-slate-600">
              {activeTab === "main" ? "Mostrando categorías principales" : 
               activeTab === "sub" ? "Mostrando subcategorías" : "Mostrando todas las categorías"}
            </div>
            <div className="flex gap-2">
              <Button 
                size="sm" 
                variant="ghost" 
                className={`text-xs ${viewMode === 'compact' ? 'bg-orange-100' : ''}`}
                onClick={() => setViewMode('compact')}
              >
                <List className="h-3.5 w-3.5 mr-1" /> Compacto
              </Button>
              <Button 
                size="sm" 
                variant="ghost" 
                className={`text-xs ${viewMode === 'detailed' ? 'bg-orange-100' : ''}`}
                onClick={() => setViewMode('detailed')}
              >
                <Eye className="h-3.5 w-3.5 mr-1" /> Detallado
              </Button>
            </div>
          </div>
        </Tabs>
      </CardHeader>
      
      <CardContent className="p-4">
        <div className="space-y-4 mb-6 border rounded-lg p-4 bg-gradient-to-r from-orange-50 to-amber-50">
          <h3 className="font-medium text-lg mb-2">Agregar nueva categoría</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <Input
              placeholder="Nombre de categoría"
              value={newCategory}
              onChange={e => setNewCategory(e.target.value)}
              className="border-orange-200 focus:border-orange-400"
            />
            <Input
              placeholder="URL de imagen"
              value={newImage}
              onChange={e => setNewImage(e.target.value)}
              className="border-orange-200 focus:border-orange-400"
            />
          </div>
          
          <div>
            <label className="text-sm text-gray-600 mb-1 block">Categoría padre (opcional)</label>
            <Select 
              value={newParentId || "none"} 
              onValueChange={(value) => setNewParentId(value !== "none" ? value : null)}
            >
              <SelectTrigger className="border-orange-200 focus:border-orange-400 focus:ring-orange-400">
                <SelectValue placeholder="Ninguna (categoría principal)" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">Ninguna (categoría principal)</SelectItem>
                {mainCategories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <Button onClick={handleAdd} className="w-full gradient-orange">
            <Plus className="h-4 w-4 mr-2" /> Agregar categoría
          </Button>
        </div>
        
        <h3 className="font-medium text-lg mb-3">Filtrar categorías</h3>
        <Select value={selectedCategory} onValueChange={setSelectedCategory}>
          <SelectTrigger className="w-full md:w-60 border-orange-200 focus:border-orange-400 focus:ring-orange-400">
            <Filter className="h-4 w-4 mr-2 text-orange-500" />
            <SelectValue placeholder="Todas las categorías" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Todas las categorías</SelectItem>
            <SelectItem value="main">Solo categorías principales</SelectItem>
            <SelectItem value="sub">Solo subcategorías</SelectItem>
            {categories.map((category) => (
              <SelectItem key={category.id} value={category.id}>
                {category.name} {category.parentId ? '(subcategoría)' : '(principal)'}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        {/* Lista de categorías filtradas */}
        <div className="mt-6">
          <h3 className="font-medium text-lg mb-3">Categorías</h3>
          
          {/* Categorías principales */}
          <div className="space-y-6">
            {/* Filtrar las categorías según la selección */}
            {(selectedCategory === "all" || selectedCategory === "main" ? mainCategories : [])
              .filter(cat => selectedCategory === "all" || selectedCategory === "main" || cat.id === selectedCategory)
              .map(cat => (
                <div key={cat.id} className="border rounded-lg overflow-hidden">
                  <div className="bg-white p-4">
                    {editingId === cat.id ? (
                      <div className="space-y-3">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <Input
                            value={editingName}
                            onChange={e => setEditingName(e.target.value)}
                            placeholder="Nombre de categoría"
                          />
                          <Input
                            value={editingImage}
                            onChange={e => setEditingImage(e.target.value)}
                            placeholder="URL de imagen"
                          />
                        </div>
                        
                        <div>
                          <label className="text-sm text-gray-600 mb-1 block">Categoría padre (opcional)</label>
                          <Select 
                            value={editingParentId || "none"} 
                            onValueChange={(value) => setEditingParentId(value !== "none" ? value : null)}
                          >
                            <SelectTrigger className="border-orange-200 focus:border-orange-400 focus:ring-orange-400">
                              <SelectValue placeholder="Ninguna (categoría principal)" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="none">Ninguna (categoría principal)</SelectItem>
                              {mainCategories
                                .filter(mainCat => mainCat.id !== cat.id) // No mostrar la categoría actual
                                .map((category) => (
                                  <SelectItem key={category.id} value={category.id}>
                                    {category.name}
                                  </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div className="flex justify-end gap-2 mt-2">
                          <Button size="sm" onClick={() => handleEdit(cat.id)}>Guardar</Button>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => {
                              setEditingId(null);
                              setEditingName("");
                              setEditingImage("");
                              setEditingParentId(null);
                            }}
                          >
                            Cancelar
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <img
                            src={cat.image || "https://via.placeholder.com/40x40?text=?"}
                            alt={cat.name}
                            className="w-12 h-12 object-cover rounded-md"
                          />
                          <div>
                            <h4 className="font-medium text-lg">{cat.name}</h4>
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded">
                              Categoría principal
                            </span>
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => {
                              setEditingId(cat.id);
                              setEditingName(cat.name);
                              setEditingImage(cat.image || "");
                              setEditingParentId(cat.parentId || null);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            className="text-red-600" 
                            onClick={() => handleDelete(cat.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Subcategorías relacionadas */}
                  {!editingId && categories
                    .filter(subCat => subCat.parentId === cat.id && 
                             (selectedCategory === "all" || selectedCategory === cat.id || selectedCategory === "sub"))
                    .length > 0 && (
                    <div className="bg-gray-50 p-4 border-t">
                      <h5 className="text-sm font-medium text-gray-600 mb-2">Subcategorías:</h5>
                      <ul className="space-y-2">
                        {categories
                          .filter(subCat => subCat.parentId === cat.id && 
                                  (selectedCategory === "all" || selectedCategory === cat.id || selectedCategory === "sub"))
                          .map(subCat => (
                            <li key={subCat.id} className="flex items-center justify-between bg-white p-2 rounded border">
                              {editingId === subCat.id ? (
                                <div className="w-full space-y-3">
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    <Input
                                      value={editingName}
                                      onChange={e => setEditingName(e.target.value)}
                                      placeholder="Nombre de subcategoría"
                                    />
                                    <Input
                                      value={editingImage}
                                      onChange={e => setEditingImage(e.target.value)}
                                      placeholder="URL de imagen"
                                    />
                                  </div>
                                  
                                  <div>
                                    <label className="text-sm text-gray-600 mb-1 block">Categoría padre</label>
                                    <Select 
                                      value={editingParentId || "none"} 
                                      onValueChange={(value) => setEditingParentId(value !== "none" ? value : null)}
                                    >
                                      <SelectTrigger className="border-orange-200 focus:border-orange-400 focus:ring-orange-400">
                                        <SelectValue placeholder="Ninguna (categoría principal)" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="none">Ninguna (categoría principal)</SelectItem>
                                        {mainCategories.map((category) => (
                                          <SelectItem key={category.id} value={category.id}>
                                            {category.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  </div>
                                  
                                  <div className="flex justify-end gap-2 mt-2">
                                    <Button size="sm" onClick={() => handleEdit(subCat.id)}>Guardar</Button>
                                    <Button 
                                      size="sm" 
                                      variant="outline" 
                                      onClick={() => {
                                        setEditingId(null);
                                        setEditingName("");
                                        setEditingImage("");
                                        setEditingParentId(null);
                                      }}
                                    >
                                      Cancelar
                                    </Button>
                                  </div>
                                </div>
                              ) : (
                                <>
                                  <div className="flex items-center gap-2">
                                    <img
                                      src={subCat.image || "https://via.placeholder.com/30x30?text=?"}
                                      alt={subCat.name}
                                      className="w-8 h-8 object-cover rounded"
                                    />
                                    <span className="font-medium text-sm">{subCat.name}</span>
                                  </div>
                                  
                                  <div className="flex gap-1">
                                    <Button 
                                      size="sm" 
                                      variant="ghost" 
                                      className="h-8 w-8 p-0"
                                      onClick={() => {
                                        setEditingId(subCat.id);
                                        setEditingName(subCat.name);
                                        setEditingImage(subCat.image || "");
                                        setEditingParentId(subCat.parentId || null);
                                      }}
                                    >
                                      <Edit className="h-3.5 w-3.5" />
                                    </Button>
                                    <Button 
                                      size="sm" 
                                      variant="ghost" 
                                      className="h-8 w-8 p-0 text-red-600" 
                                      onClick={() => handleDelete(subCat.id)}
                                    >
                                      <Trash2 className="h-3.5 w-3.5" />
                                    </Button>
                                  </div>
                                </>
                              )}
                            </li>
                          ))}
                      </ul>
                    </div>
                  )}
                </div>
              ))
            }
            
            {/* Subcategorías independientes (cuando se filtran solo subcategorías) */}
            {selectedCategory === "sub" && (
              <div className="border rounded-lg p-4 bg-gray-50 mt-4">
                <h5 className="font-medium mb-3">Todas las subcategorías</h5>
                <ul className="space-y-2">
                  {subCategories.map(subCat => (
                    <li key={subCat.id} className="flex items-center justify-between bg-white p-3 rounded border">
                      {editingId === subCat.id ? (
                        <div className="w-full space-y-3">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                            <Input
                              value={editingName}
                              onChange={e => setEditingName(e.target.value)}
                              placeholder="Nombre de subcategoría"
                            />
                            <Input
                              value={editingImage}
                              onChange={e => setEditingImage(e.target.value)}
                              placeholder="URL de imagen"
                            />
                          </div>
                          
                          <div>
                            <label className="text-sm text-gray-600 mb-1 block">Categoría padre</label>
                            <Select 
                              value={editingParentId || "none"} 
                              onValueChange={(value) => setEditingParentId(value !== "none" ? value : null)}
                            >
                              <SelectTrigger className="border-orange-200 focus:border-orange-400 focus:ring-orange-400">
                                <SelectValue placeholder="Ninguna (categoría principal)" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="none">Ninguna (categoría principal)</SelectItem>
                                {mainCategories.map((category) => (
                                  <SelectItem key={category.id} value={category.id}>
                                    {category.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          
                          <div className="flex justify-end gap-2 mt-2">
                            <Button size="sm" onClick={() => handleEdit(subCat.id)}>Guardar</Button>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => {
                                setEditingId(null);
                                setEditingName("");
                                setEditingImage("");
                                setEditingParentId(null);
                              }}
                            >
                              Cancelar
                            </Button>
                          </div>
                        </div>
                      ) : (
                        <>
                          <div className="flex items-center gap-3">
                            <img
                              src={subCat.image || "https://via.placeholder.com/30x30?text=?"}
                              alt={subCat.name}
                              className="w-10 h-10 object-cover rounded"
                            />
                            <div>
                              <span className="font-medium">{subCat.name}</span>
                              <div className="flex items-center gap-1 mt-1">
                                <span className="text-xs text-gray-500">Categoría padre:</span>
                                <span className="text-xs font-medium">
                                  {categories.find(c => c.id === subCat.parentId)?.name || "N/A"}
                                </span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex gap-1">
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => {
                                setEditingId(subCat.id);
                                setEditingName(subCat.name);
                                setEditingImage(subCat.image || "");
                                setEditingParentId(subCat.parentId || null);
                              }}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              className="text-red-600" 
                              onClick={() => handleDelete(subCat.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </>
                      )}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {/* Mensaje cuando no hay categorías */}
            {(selectedCategory === "all" && categories.length === 0) || 
             (selectedCategory === "main" && mainCategories.length === 0) ||
             (selectedCategory === "sub" && subCategories.length === 0) || 
             (selectedCategory !== "all" && selectedCategory !== "main" && selectedCategory !== "sub" && !categories.find(cat => cat.id === selectedCategory)) && (
              <div className="text-center py-10 border rounded-lg">
                <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="8" y1="12" x2="16" y2="12"></line>
                  </svg>
                </div>
                <h3 className="font-medium text-lg mb-1">No hay categorías</h3>
                <p className="text-gray-500 mb-4">No se encontraron categorías con los criterios seleccionados</p>
                {selectedCategory !== "all" && (
                  <Button variant="outline" onClick={() => setSelectedCategory("all")}>
                    Ver todas las categorías
                  </Button>
                )}
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
